/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50559
Source Host           : localhost:3306
Source Database       : db_blog3

Target Server Type    : MYSQL
Target Server Version : 50559
File Encoding         : 65001

Date: 2018-09-22 16:31:51
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '文章id，主键',
  `title` varchar(200) DEFAULT NULL COMMENT '文章标题',
  `summary` varchar(400) DEFAULT NULL COMMENT '摘要',
  `releaseDate` datetime DEFAULT NULL COMMENT '发布日期',
  `clickHit` int(11) DEFAULT NULL COMMENT '查看次数',
  `replyHit` int(11) DEFAULT NULL COMMENT '回复次数',
  `content` text COMMENT '文章内容html源代码',
  `typeId` int(11) DEFAULT NULL COMMENT '文章类型Id',
  `keyWord` varchar(200) DEFAULT NULL COMMENT '关键字，空格 隔开',
  `contentNoTag` text COMMENT '文章内容，无网页标签 Lucene分词用(markdwon源码)',
  `blogFormat` char(2) NOT NULL COMMENT '文章格式，比如是ue或者md',
  PRIMARY KEY (`id`),
  KEY `typeId` (`typeId`),
  CONSTRAINT `t_blog_ibfk_1` FOREIGN KEY (`typeId`) REFERENCES `t_blogtype` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES ('1', '【Linux】CentOS 7一个解决“network.service: control process exited, code=exited status=1”方法', '##### 【Linux】CentOS 7一个解决“network.service: control process exited, code=exited status=1”方法\n###### 错误代码如下：\n```shell\n[root@CT71 ~]# systemctl status network.', '2018-07-09 10:31:04', '8', '0', '<h5 id=\"h5--linux-centos-7-network-service-control-process-exited-code-exited-status-1-\"><a name=\"【Linux】CentOS 7一个解决“network.service: control process exited, code=exited status=1”方法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>【Linux】CentOS 7一个解决“network.service: control process exited, code=exited status=1”方法</h5><h6 id=\"h6--\"><a name=\"错误代码如下：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>错误代码如下：</h6><pre><code class=\"lang-shell\">[root@CT71 ~]# systemctl status network.service \n● network.service - LSB: Bring up/down networking\n   Loaded: loaded (/etc/rc.d/init.d/network; bad; vendor preset: disabled)\n   Active: failed (Result: exit-code) since Fri 2017-08-04 08:20:31 CST; 1min 44s ago\n     Docs: man:systemd-sysv-generator(8)\n  Process: 62726 ExecStop=/etc/rc.d/init.d/network stop (code=exited, status=0/SUCCESS)\n  Process: 63183 ExecStart=/etc/rc.d/init.d/network start (code=exited, status=1/FAILURE)\n\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 systemd[1]: network.service: control process exited, code=exited status=1\nAug 04 08:20:31 CT71 systemd[1]: Failed to start LSB: Bring up/down networking.\nAug 04 08:20:31 CT71 systemd[1]: Unit network.service entered failed state.\nAug 04 08:20:31 CT71 systemd[1]: network.service failed.\n</code></pre>\n<h6 id=\"h6--\"><a name=\"解决方法是关闭网络管理，如下：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>解决方法是关闭网络管理，如下：</h6><pre><code class=\"lang-shell\">systemctl stop NetworkManager\nsystemctl disable NetworkManager\n    Removed symlink /etc/systemd/system/multiuser.target.wants/NetworkManager.service.\n    Removed symlink /etc/systemd/system/dbus-org.freedesktop.NetworkManager.service.\n    Removed symlink /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service.\n</code></pre>\n<p>最后重启网卡解决问题。</p>\n<pre><code class=\"lang-shell\">systemctl restart network.service\n</code></pre>\n', '16', 'Linux', '##### 【Linux】CentOS 7一个解决“network.service: control process exited, code=exited status=1”方法\n###### 错误代码如下：\n```shell\n[root@CT71 ~]# systemctl status network.service \n● network.service - LSB: Bring up/down networking\n   Loaded: loaded (/etc/rc.d/init.d/network; bad; vendor preset: disabled)\n   Active: failed (Result: exit-code) since Fri 2017-08-04 08:20:31 CST; 1min 44s ago\n     Docs: man:systemd-sysv-generator(8)\n  Process: 62726 ExecStop=/etc/rc.d/init.d/network stop (code=exited, status=0/SUCCESS)\n  Process: 63183 ExecStart=/etc/rc.d/init.d/network start (code=exited, status=1/FAILURE)\n\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 network[63183]: RTNETLINK answers: File exists\nAug 04 08:20:31 CT71 systemd[1]: network.service: control process exited, code=exited status=1\nAug 04 08:20:31 CT71 systemd[1]: Failed to start LSB: Bring up/down networking.\nAug 04 08:20:31 CT71 systemd[1]: Unit network.service entered failed state.\nAug 04 08:20:31 CT71 systemd[1]: network.service failed.\n```\n###### 解决方法是关闭网络管理，如下：\n```shell\nsystemctl stop NetworkManager\nsystemctl disable NetworkManager\n    Removed symlink /etc/systemd/system/multiuser.target.wants/NetworkManager.service.\n    Removed symlink /etc/systemd/system/dbus-org.freedesktop.NetworkManager.service.\n    Removed symlink /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service.\n```\n最后重启网卡解决问题。\n```shell\nsystemctl restart network.service\n```', 'md');
INSERT INTO `t_blog` VALUES ('2', '如何发布JavaWeb项目到互联网', '比如我们有个项目想要发布到互联网上，我们首先需要购买域名以及主机，主机的话，推荐云主机（本人推荐西部数码或者阿里云），性能好；当然也有其他的比较好的，各有好坏吧，看你个人选择了。我们先在云主机上搭建环境，比如Mysql，Jdk，Tomcat；然后我们把自己开发的项目打包，打成War包；具体操作；右击项目-> ', '2016-02-24 18:55:40', '529', '0', '<p>比如我们有个项目想要发布到互联网上，我们首先需要购买域名以及主机，主机的话，推荐云主机（本人推荐西部数码或者阿里云），性能好；</p><p>当然\r\r\n也有其他的比较好的，各有好坏吧，看你个人选择了。</p><p>我们先在云主机上搭建环境，比如Mysql，Jdk，Tomcat；</p><p>然后我们把自己开发的项目打包\r\r\n，打成War包；</p><p>具体操作；右击项目-&gt; Export</p><p><img alt=\"20160224184605.jpg\" \r\r\nsrc=\"/emd_blog/static/userImages/20160224/1456310792100080598.jpg\" title=\"1456310792100080598.jpg\"/></p><p><br/></p><p>然后点击 Next \r\r\n;</p><p><img alt=\"20160224184644.jpg\" src=\"/emd_blog/static/userImages/20160224/1456310837522027928.jpg\" \r\r\ntitle=\"1456310837522027928.jpg\"/></p><p><br/></p><p>选择Browse，我们随便选个地方&nbsp; 然后点击Finish即可；</p><p>这样我们就可以生成一个War包\r\r\n了；</p><p>我们把War包传到主机上去，放到Tomcat的webapps下，启动tomcat的startup.bat，会自动解压项目；</p><p>到了这里，还不够。我们只能通过 <a \r\r\n_src=\"http://外网IP:8080/项目名称访问；\" href=\"http://外网IP:8080/项目名称访问；\">http://外网IP:8080/项目名称访问；</a><br/></p><p>我们现在要\r\r\n干两个事情，第一个是去掉端口，第二个是去掉项目名称</p><p>我们找到tomcat安装包下的conf文件夹下的server.xml文件；</p><p><img \r\r\nalt=\"20160224185006.jpg\" src=\"/emd_blog/static/userImages/20160224/1456311055147010296.jpg\" title=\"1456311055147010296.jpg\"/></p><p>找到\r\r\nConnector节点；</p><pre class=\"brush:xml;toolbar:false\">&lt;Connector&nbsp;port=&quot;8080&quot;&nbsp;protocol=&quot;HTTP/1.1&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectionTimeout=&quot;20000&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redirectPort=&quot;8443&quot;&nbsp;/&gt;</pre><p>我\r\r\n们把port=&quot;8080&quot;改成80端口即可，这样我们就可以不用端口了。不加端口就是默认访问80端口；</p><p><br/></p><p>我们在最后 找到Host节点：\r\r\n</p><pre class=\"brush:xml;toolbar:false\">&lt;Host&nbsp;name=&quot;localhost&quot;&nbsp;&nbsp;appBase=&quot;webapps&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unpackWARs=&quot;true&quot;&nbsp;autoDeploy=&quot;true&quot;&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--\r\r\n&nbsp;SingleSignOn&nbsp;valve,&nbsp;share&nbsp;authentication&nbsp;between&nbsp;web&nbsp;applications\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Documentation&nbsp;at:&nbsp;/docs/config/valve.html&nbsp;--\r\r\n&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Valve&nbsp;className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot;&nbsp;/&gt\r\r\n;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--\r\r\n&nbsp;Access&nbsp;log&nbsp;processes&nbsp;all&nbsp;example.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Documentation&nbsp;at:&nbsp;/docs/config/valve.html\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Note:&nbsp;The&nbsp;pattern&nbsp;used&nbsp;is&nbsp;equivalent&n\r\r\nbsp;to&nbsp;using&nbsp;pattern=&quot;common&quot;&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Valve&nbsp;className=&quot;org.apache.catalina.valves.AccessLogValve&quot;&nbsp;directory\r\r\n=&quot;logs&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix=&quot;localhost_access_log.&quot;&nbsp;suffi\r\r\nx=&quot;.txt&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern=&quot;%h&nbsp;%l&nbsp;\r\r\n%u&nbsp;%t&nbsp;&amp;quot;%r&amp;quot;&nbsp;%s&nbsp;%b&quot;&nbsp;/&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Host&gt;</pre><p><br/></p><p>\r\r\n我们在里面加一个节点：</p><pre class=\"brush:java;toolbar:false\">&lt;Context&nbsp;path=&quot;&quot;&nbsp;docBase=&quot;C:\\apache-tomcat-\r\r\n7.0.11-windows-x86\\apache-tomcat-7.0.11\\webapps\\Blog&quot;&nbsp;debug=&quot;0&quot;&nbsp;reloadable=&quot;true&quot;&nbsp;/&gt;</pre><pre \r\r\nclass=\"brush:xml;toolbar:false\">&lt;Host&nbsp;name=&quot;localhost&quot;&nbsp;&nbsp;appBase=&quot;webapps&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unpackWARs=&quot;true&quot;&nbsp;autoDeploy=&quot;true&quot;&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--\r\r\n&nbsp;SingleSignOn&nbsp;valve,&nbsp;share&nbsp;authentication&nbsp;between&nbsp;web&nbsp;applications\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Documentation&nbsp;at:&nbsp;/docs/config/valve.html&nbsp;--\r\r\n&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Valve&nbsp;className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot;&nbsp;/&gt\r\r\n;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Context&nbsp;path=&quot;&quot;&nbsp;docBase=&quot;C:\r\r\n\\apache-tomcat-7.0.11-windows-x86\\apache-tomcat-7.0.11\\webapps\r\r\n\\BaiduYun&quot;&nbsp;debug=&quot;0&quot;&nbsp;reloadable=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Access&nbsp;log&nbsp;processes&nbsp;all&nbsp;example.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Documentation&nbsp;at:&nbsp;/docs/config/valve.html\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Note:&nbsp;The&nbsp;pattern&nbsp;used&nbsp;is&nbsp;equivalent&n\r\r\nbsp;to&nbsp;using&nbsp;pattern=&quot;common&quot;&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Valve&nbsp;className=&quot;org.apache.catalina.valves.AccessLogValve&quot;&nbsp;directory\r\r\n=&quot;logs&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix=&quot;localhost_access_log.&quot;&nbsp;suffi\r\r\nx=&quot;.txt&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern=&quot;%h&nbsp;%l&nbsp;\r\r\n%u&nbsp;%t&nbsp;&amp;quot;%r&amp;quot;&nbsp;%s&nbsp;%b&quot;&nbsp;resolveHosts=&quot;false&quot;/&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Host&gt;</pre><p><br/></p><p>这里的docBase要给成你的项目所在你服务器的本机的绝对路径；</p><p>其他不\r\r\n用变；</p><p><br/></p><p>项目数据库脚本的话自己导入下即可；这样就完整了项目部署；</p><p>我们可以直接通过外网IP直接访问项目；</p><p>域名解析下\r\r\n服务器外网IP。我们就可以通过域名访问了；</p><p><br/></p>', '3', 'tomcat', '比如我们有个项目想要发布到互联网上，我们首先需要购买域名以及主机，主机的话，推荐云主机（本人推荐西部数码或者阿里云），性能好；当然也有其他的比较好的，各有好坏吧，看你个人选择了。我们先在云主机上搭建环境，比如Mysql，Jdk，Tomcat；然后我们把自己开发的项目打包，打成War包；具体操作；右击项目-> Export然后点击 Next ;选择Browse，我们随便选个地方  然后点击Finish即可；这样我们就可以生成一个War包了；我们把War包传到主机上去，放到Tomcat的webapps下，启动tomcat的startup.bat，会自动解压项目；到了这里，还不够。我们只能通过 http://外网IP:8080/项目名称访问；我们现在要干两个事情，第一个是去掉端口，第二个是去掉项目名称我们找到tomcat安装包下的conf文件夹下的server.xml文件；找到Connector节点；<Connector port=\"8080\" protocol=\"HTTP/1.1\"               connectionTimeout=\"20000\"               redirectPort=\"8443\" />我们把port=\"8080\"改成80端口即可，这样我们就可以不用端口了。不加端口就是默认访问80端口；我们在最后 找到Host节点：<Host name=\"localhost\"  appBase=\"webapps\"            unpackWARs=\"true\" autoDeploy=\"true\">        <!-- SingleSignOn valve, share authentication between web applications             Documentation at: /docs/config/valve.html -->        <!--        <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" />        -->        <!-- Access log processes all example.             Documentation at: /docs/config/valve.html             Note: The pattern used is equivalent to using pattern=\"common\" -->        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"               prefix=\"localhost_access_log.\" suffix=\".txt\"               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />      </Host>我们在里面加一个节点：<Context path=\"\" docBase=\"C:\\apache-tomcat-7.0.11-windows-x86\\apache-tomcat-7.0.11\\webapps\\Blog\" debug=\"0\" reloadable=\"true\" />   <Host name=\"localhost\"  appBase=\"webapps\"            unpackWARs=\"true\" autoDeploy=\"true\">        <!-- SingleSignOn valve, share authentication between web applications             Documentation at: /docs/config/valve.html -->        <!--        <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" />        -->              <Context path=\"\" docBase=\"C:\\apache-tomcat-7.0.11-windows-x86\\apache-tomcat-7.0.11\\webapps\\BaiduYun\" debug=\"0\" reloadable=\"true\" />           <!-- Access log processes all example.             Documentation at: /docs/config/valve.html             Note: The pattern used is equivalent to using pattern=\"common\" -->        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"                 prefix=\"localhost_access_log.\" suffix=\".txt\"               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" resolveHosts=\"false\"/>      </Host>这里的docBase要给成你的项目所在你服务器的本机的绝对路径；其他不用变；项目数据库脚本的话自己导入下即可；这样就完整了项目部署；我们可以直接通过外网IP直接访问项目；域名解析下服务器外网IP。我们就可以通过域名访问了；', 'ue');
INSERT INTO `t_blog` VALUES ('4', '使用Jsoup解析出html中的img元素', 'jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。博客项目有个需求。展示博客列表的时候，显示一些博客里的图片，增强用户体验；这里的话，有两种方案，第一种 是在后台处理，把', '2016-02-14 12:52:43', '318', '0', '<p><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; line-height: 24px; text-indent: 28px; background-color: rgb(255, 255, 255);\">jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span></p><p><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; line-height: 24px; text-indent: 28px; background-color: rgb(255, 255, 255);\">博客项目有个需求。展示博客列表的时候，显示一些博客里的图片，增强用户体验；</span></p><p>这里的话，有两种方案，第一种 是在后台处理，把解析好的图片存集合里，然后转发到页面，遍历显示；还有一种是把博客内容送到页面，用Jquery处理。</p><p>我考虑了下。还是在后台处理好比较好，因为项目本身用到了 cnd加速，所以在前端处理反而影响效率。</p><p>在后端处理，可以使用Jsoup，很方便；</p><p><br/></p><p>Jsoup主页：<a href=\"http://jsoup.org/\" target=\"_blank\" title=\"http://jsoup.org/\">http://jsoup.org/</a></p><p><br/></p><p>maven地址：</p><pre class=\"brush:xml;toolbar:false\">&lt;dependency&gt;\n		&lt;groupId&gt;org.jsoup&lt;/groupId&gt;\n		&lt;artifactId&gt;jsoup&lt;/artifactId&gt;\n		&lt;version&gt;1.8.3&lt;/version&gt;\n	&lt;/dependency&gt;</pre><p><br/></p><p><br/></p><p>这里给下关键代码：</p><pre class=\"brush:java;toolbar:false\">for(Blog&nbsp;blog:blogList){\n			List&lt;String&gt;&nbsp;imagesList=blog.getImagesList();\n			String&nbsp;blogInfo=blog.getContent();\n			Document&nbsp;doc=Jsoup.parse(blogInfo);\n			Elements&nbsp;jpgs=doc.select(&quot;img[src$=.jpg]&quot;);&nbsp;//　查找扩展名是jpg的图片\n			for(int&nbsp;i=0;i&lt;jpgs.size();i++){\n				Element&nbsp;jpg=jpgs.get(i);\n				imagesList.add(jpg.toString());\n				if(i==2){\n					break;\n				}\n			}\n		}</pre><p><br/></p><p>主要涉及到一些选择器。不难。大家可以参考下官方文档。或者百度很容易上手。</p><p><br/></p>', '10', 'jsoup java', 'jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。博客项目有个需求。展示博客列表的时候，显示一些博客里的图片，增强用户体验；这里的话，有两种方案，第一种 是在后台处理，把解析好的图片存集合里，然后转发到页面，遍历显示；还有一种是把博客内容送到页面，用Jquery处理。我考虑了下。还是在后台处理好比较好，因为项目本身用到了 cnd加速，所以在前端处理反而影响效率。在后端处理，可以使用Jsoup，很方便；Jsoup主页：http://jsoup.org/maven地址：<dependency>		<groupId>org.jsoup</groupId>		<artifactId>jsoup</artifactId>		<version>1.8.3</version>	</dependency>这里给下关键代码：for(Blog blog:blogList){			List<String> imagesList=blog.getImagesList();			String blogInfo=blog.getContent();			Document doc=Jsoup.parse(blogInfo);			Elements jpgs=doc.select(\"img[src$=.jpg]\"); //　查找扩展名是jpg的图片			for(int i=0;i<jpgs.size();i++){				Element jpg=jpgs.get(i);				imagesList.add(jpg.toString());				if(i==2){					break;				}			}		}主要涉及到一些选择器。不难。大家可以参考下官方文档。或者百度很容易上手。', 'ue');
INSERT INTO `t_blog` VALUES ('7', '【Redis】Redis常用命令总结。以及安装详细图解。', '进入redis目录下 Redis清空数据：执行命令： flushall查看redis（安装在linux服务器上）的版本redis-server--version 命令或 redis-server-v安装图解：具体请看下列详解：    ', '2018-06-21 19:51:45', '21', '0', '<p style=\"white-space: normal;\"><span style=\"background-color: rgb(255, 255, 255); color: rgb(79, 79, 79); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; text-align: justify;\">进入redis目录下&nbsp;</span></p><p style=\"white-space: normal;\"><span style=\"color: rgb(79, 79, 79); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; text-align: justify; background-color: rgb(255, 255, 255);\">Redis清空数据：执行命令：</span></p><pre class=\"brush:bash;toolbar:false\">&nbsp;flushall</pre><p style=\"white-space: normal;\"><span style=\"color: rgb(79, 79, 79); font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; text-align: justify; background-color: rgb(255, 255, 255);\"></span></p><p style=\"box-sizing: inherit; outline: 0px; padding: 0px; margin: 0px; font-size: 24px; word-break: break-all; color: rgb(51, 51, 51); font-family: &quot;SF Pro Display&quot;, Roboto, Noto, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"font-size: 16px;\">查看redis（安装在linux服务器上）的版本</span></p><pre class=\"brush:bash;toolbar:false\">redis-server--version&nbsp;命令或&nbsp;redis-server-v\n\n安装图解：</pre><p><span label=\"明显强调\" style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\">具体请看下列详解：<br/></span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"/emd_blog/static/userImages/20180705/1530783303705058170.png\" title=\"1530783303705058170.png\" alt=\"image.png\"/></p><p><img src=\"/emd_blog/static/userImages/20180705/1530783351842087331.png\" title=\"1530783351842087331.png\" alt=\"image.png\"/></p>', '18', 'redis', '进入redis目录下 Redis清空数据：执行命令： flushall查看redis（安装在linux服务器上）的版本redis-server--version 命令或 redis-server-v安装图解：具体请看下列详解：    ', 'ue');
INSERT INTO `t_blog` VALUES ('8', '【Mysql】（1062 - Duplicate entry \'XXXXXXX\' for key \'PRIMARY\' ） 字段长度超出数据库标准', '【Mysql】（1062 - Duplicate entry \'XXXXXXX\' for key \'PRIMARY\' ） 字段长度超出数据库标准遇到这种错，一般是数据库字段长度不够。', '2018-06-28 18:13:58', '7', '0', '<p>【Mysql】（1062 - Duplicate entry &#39;XXXXXXX&#39; for key &#39;PRIMARY&#39; ） 字段长度超出数据库标准</p><p><br/></p><p>遇到这种错，一般是数据库字段长度不够。<br/></p>', '2', 'Mysql', '【Mysql】（1062 - Duplicate entry \'XXXXXXX\' for key \'PRIMARY\' ） 字段长度超出数据库标准遇到这种错，一般是数据库字段长度不够。', 'ue');
INSERT INTO `t_blog` VALUES ('9', '【Oracle】怎样查看Oracle的数据库名称sid名称', '怎样查看Oracle的数据库名称sid用sysdba身份登录 比如 conn / as  sysdba 匿名管理员登陆执行 select name form V$database; 或是执行select * from  V$database;不过执行第二个显示的内容太多了不好找自己想要的结果你也可以先用des', '2018-06-28 18:20:28', '7', '0', '<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\">怎样查看Oracle的数据库名称sid</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\">用sysdba身份登录 比如 conn / as&nbsp;&nbsp;sysdba 匿名管理员登陆</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\">执行&nbsp;</span></p><pre class=\"brush:sql;toolbar:false\">select&nbsp;name&nbsp;form&nbsp;V$database;</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\"></span><br/></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\">&nbsp;或是执行</span></p><pre class=\"brush:sql;toolbar:false\">select&nbsp;*&nbsp;from&nbsp;&nbsp;V$database;</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\"></span><br/></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\">不过执行第二个显示的内容太多了不好找自己想要的结果</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\">你也可以先用desc V$database;语句查看一下V$database都有什么字段然后选择自己想要的字段进行选择</span></p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\">查看实例名称(sid)：</span></p><pre class=\"brush:sql;toolbar:false\">select&nbsp;instance_name&nbsp;from&nbsp;&nbsp;V$instance;</pre><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(73, 73, 73); line-height: 21px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; border: 0px; list-style: none; background-color: rgb(254, 254, 254);\"><span style=\"box-sizing: border-box; outline: 0px; word-break: break-all; font-family: SimHei; font-size: 18px;\">一般默认情况下sid与你的数据库的名称是一样的！</span></p><p><br/></p>', '19', 'Oracle', '怎样查看Oracle的数据库名称sid用sysdba身份登录 比如 conn / as  sysdba 匿名管理员登陆执行 select name form V$database; 或是执行select * from  V$database;不过执行第二个显示的内容太多了不好找自己想要的结果你也可以先用desc V$database;语句查看一下V$database都有什么字段然后选择自己想要的字段进行选择查看实例名称(sid)：select instance_name from  V$instance;一般默认情况下sid与你的数据库的名称是一样的！', 'ue');
INSERT INTO `t_blog` VALUES ('10', '【Nginx】Nginx安装说明详解', 'nginx是C语言开发，建议在linux上运行，本教程使用Centos6.5作为安装环境。n  gcc         安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc：yum install gcc-c++n  PCRE         PCRE(Perl', '2018-06-28 18:28:09', '20', '0', '<p>nginx<span style=\"font-family:宋体\">是</span>C<span style=\"font-family:宋体\">语言开发，建议在</span>linux<span style=\"font-family:宋体\">上运行，本教程使用</span>Centos6.5<span style=\"font-family:宋体\">作为安装环境。</span></p><p style=\"margin-left:56px\"><span style=\"font-size:16px;font-family:Wingdings\">n<span style=\"font:9px &#39;Times New Roman&#39;\">&nbsp; </span></span><span style=\"font-size:16px;font-family:Consolas\">gcc</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"font-family:宋体\">安装</span>nginx<span style=\"font-family:宋体\">需要先将官网下载的源码进行编译，编译依赖</span>gcc<span style=\"font-family:宋体\">环境，如果没有</span>gcc<span style=\"font-family:宋体\">环境，需要安装</span>gcc<span style=\"font-family:宋体\">：</span>yum install gcc-c++</p><p style=\"margin-left:56px\"><span style=\"font-size:16px;font-family:Wingdings\">n<span style=\"font:9px &#39;Times New Roman&#39;\">&nbsp; </span></span>PCRE</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PCRE(Perl Compatible Regular Expressions)<span style=\"font-family:宋体\">是一个</span>Perl<span style=\"font-family:宋体\">库，包括</span> perl <span style=\"font-family:宋体\">兼容的正则表达式库。</span>nginx<span style=\"font-family:宋体\">的</span>http<span style=\"font-family:宋体\">模块使用</span>pcre<span style=\"font-family:宋体\">来解析正则表达式，所以需要在</span>linux<span style=\"font-family:宋体\">上安装</span>pcre<span style=\"font-family:宋体\">库。</span></p><p><strong>yum install -y pcre pcre-devel</strong></p><p><span style=\"font-family:宋体\">注：</span>pcre-devel<span style=\"font-family:宋体\">是使用</span>pcre<span style=\"font-family:宋体\">开发的一个二次开发库。</span>nginx<span style=\"font-family:宋体\">也需要此库。</span></p><p style=\"margin-left:56px\"><span style=\"font-family:Wingdings\">n<span style=\"font:9px &#39;Times New Roman&#39;\">&nbsp; </span></span>zlib</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zlib<span style=\"font-family:宋体\">库提供了很多种压缩和解压缩的方式，</span>nginx<span style=\"font-family:宋体\">使用</span>zlib<span style=\"font-family:宋体\">对</span>http<span style=\"font-family:宋体\">包的内容进行</span>gzip<span style=\"font-family:宋体\">，所以需要在</span>linux<span style=\"font-family:宋体\">上安装</span>zlib<span style=\"font-family:宋体\">库。</span></p><p><strong>yum install -y zlib zlib-devel</strong></p><p>&nbsp;</p><p style=\"margin-left:56px\"><span style=\"font-family:Wingdings\">n<span style=\"font:9px &#39;Times New Roman&#39;\">&nbsp; </span></span>openssl</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OpenSSL <span style=\"font-family:宋体\">是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及</span>SSL<span style=\"font-family:宋体\">协议，并提供丰富的应用程序供测试或其它目的使用。</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nginx<span style=\"font-family:宋体\">不仅支持</span>http<span style=\"font-family:宋体\">协议，还支持</span>https<span style=\"font-family:宋体\">（即在</span>ssl<span style=\"font-family:宋体\">协议上传输</span>http<span style=\"font-family:宋体\">），所以需要在</span>linux<span style=\"font-family:宋体\">安装</span>openssl<span style=\"font-family:宋体\">库。</span></p><p><strong>yum install -y openssl openssl-devel</strong></p><p><br/></p><h1 style=\"margin-left:29px\"><span style=\"font-family:宋体\">编译安装</span></h1><p><span style=\"font-family:宋体\">将</span>nginx-1.8.0.tar.gz<span style=\"font-family:宋体\">拷贝至</span>linux<span style=\"font-family:宋体\">服务器。</span></p><p>&nbsp;</p><p><span style=\"font-family:宋体\">解压：</span></p><p>tar -zxvf nginx-1.8.0.tar.gz</p><p>cd nginx-1.8.0</p><p>&nbsp;</p><p style=\"margin-left:24px\">1、<span style=\"font:9px &#39;Times New Roman&#39;\">&nbsp; </span>configure</p><p>./configure --help<span style=\"font-family:宋体\">查询详细参数（参考本教程附录部分：</span>nginx<span style=\"font-family:宋体\">编译参数）</span></p><p>&nbsp;</p><p><span style=\"font-family:宋体\">参数设置如下：</span></p><p>./configure \\</p><p>--prefix=/usr/local/nginx \\</p><p>--pid-path=/var/run/nginx/nginx.pid \\</p><p>--lock-path=/var/lock/nginx.lock \\</p><p>--error-log-path=/var/log/nginx/error.log \\</p><p>--http-log-path=/var/log/nginx/access.log \\</p><p>--with-http_gzip_static_module \\</p><p>--http-client-body-temp-path=/var/temp/nginx/client \\</p><p>--http-proxy-temp-path=/var/temp/nginx/proxy \\</p><p>--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\</p><p>--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\</p><p>--http-scgi-temp-path=/var/temp/nginx/scgi</p><p>&nbsp;</p><p><strong><span style=\"font-family:宋体;color:red\">注意：上边将临时文件目录指定为</span><span style=\"color:red\">/var/temp/nginx</span></strong><strong><span style=\"font-family:宋体;color:red\">，需要在</span><span style=\"color:red\">/var</span></strong><strong><span style=\"font-family:宋体;color:red\">下创建</span><span style=\"color:red\">temp</span></strong><strong><span style=\"font-family:宋体;color:red\">及</span><span style=\"color:red\">nginx</span></strong><strong><span style=\"font-family:宋体;color:red\">目录</span></strong></p><p>&nbsp;</p><p>&nbsp;</p><p style=\"margin-left:24px\">2、<span style=\"font:9px &#39;Times New Roman&#39;\">&nbsp; </span><span style=\"font-family:宋体\">编译安装</span></p><p>make</p><p>make&nbsp; install</p><p>&nbsp;</p><p><span style=\"font-family:宋体\">安装成功查看安装目录</span> <span style=\"font-family:宋体\">：</span></p><p><br/></p><p>&nbsp;<img src=\"/emd_blog/static/userImages/20180628/1530181660734022549.png\" title=\"1530181660734022549.png\" alt=\"image.png\"/></p><p>&nbsp;</p><h1 style=\"margin-left:29px\"><span style=\"font-family:宋体\">启动</span>nginx</h1><p>cd /usr/local/nginx/sbin/</p><p>./nginx</p><p>&nbsp;</p><p><span style=\"font-family:宋体\">查询</span>nginx<span style=\"font-family:宋体\">进程：</span></p><p><img src=\"/emd_blog/static/userImages/20180628/1530181671897071176.png\" title=\"1530181671897071176.png\" alt=\"image.png\"/></p><p>&nbsp;</p><p>15098<span style=\"font-family:宋体\">是</span>nginx<span style=\"font-family:宋体\">主进程的进程</span>id<span style=\"font-family:宋体\">，</span>15099<span style=\"font-family:宋体\">是</span>nginx<span style=\"font-family:宋体\">工作进程的进程</span>id</p><p>&nbsp;</p><p><strong><span style=\"font-family:宋体\">注意：执行</span>./nginx</strong><strong><span style=\"font-family:宋体\">启动</span>nginx</strong><strong><span style=\"font-family:宋体\">，这里可以</span>-c</strong><strong><span style=\"font-family:宋体\">指定加载的</span>nginx</strong><strong><span style=\"font-family:宋体\">配置文件，如下：</span></strong></p><p><strong>./nginx -c /usr/local/nginx/conf/nginx.conf</strong></p><p><strong><span style=\"font-family:宋体\">如果不指定</span>-c</strong><strong><span style=\"font-family:宋体\">，</span>nginx</strong><strong><span style=\"font-family:宋体\">在启动时默认加载</span>conf/nginx.conf</strong><strong><span style=\"font-family:宋体\">文件，此文件的地址也可以在编译安装</span>nginx</strong><strong><span style=\"font-family:宋体\">时指定</span>./configure</strong><strong><span style=\"font-family:宋体\">的参数（</span>--conf-path= </strong><strong><span style=\"font-family:宋体\">指向配置文件（</span>nginx.conf</strong><strong><span style=\"font-family:宋体\">））</span></strong></p><p>&nbsp;</p><h1 style=\"margin-left:29px\"><span style=\"font-family:宋体\">停止</span>nginx</h1><p><span style=\"font-family:宋体\">方式</span>1<span style=\"font-family:宋体\">，快速停止：</span></p><p>cd /usr/local/nginx/sbin</p><p>./nginx -s stop</p><p><span style=\"font-family:宋体\">此方式相当于先查出</span>nginx<span style=\"font-family:宋体\">进程</span>id<span style=\"font-family:宋体\">再使用</span>kill<span style=\"font-family:宋体\">命令强制杀掉进程。</span></p><p>&nbsp;</p><p><span style=\"font-family:宋体\">方式</span>2<span style=\"font-family:宋体\">，完整停止</span>(<span style=\"font-family:宋体;color:red\">建议使用</span>)<span style=\"font-family:宋体\">：</span></p><p>cd /usr/local/nginx/sbin</p><p>./nginx -s quit</p><p><span style=\"font-family:宋体\">此方式停止步骤是待</span>nginx<span style=\"font-family:宋体\">进程处理任务完毕进行停止。</span></p><p>&nbsp;</p><p>&nbsp;</p><h1 style=\"margin-left:29px\"><span style=\"font-family:宋体\">重启</span>nginx</h1><p><span style=\"font-family:宋体\">方式</span>1<span style=\"font-family:宋体\">，先停止再启动（<span style=\"color:red\">建议使用</span>）：</span></p><p><span style=\"font-family:宋体\">对</span>nginx<span style=\"font-family:宋体\">进行重启相当于先停止</span>nginx<span style=\"font-family:宋体\">再启动</span>nginx<span style=\"font-family:宋体\">，即先执行停止命令再执行启动命令。</span></p><p><span style=\"font-family:宋体\">如下：</span></p><p>./nginx -s quit</p><p>./nginx</p><p>&nbsp;</p><p><span style=\"font-family:宋体\">方式</span>2<span style=\"font-family:宋体\">，重新加载配置文件：</span></p><p><span style=\"font-family:宋体\">当</span>nginx<span style=\"font-family:宋体\">的配置文件</span>nginx.conf<span style=\"font-family:宋体\">修改后，要想让配置生效需要重启</span>nginx<span style=\"font-family:宋体\">，使用</span>-s reload<span style=\"font-family:宋体\">不用先停止</span>nginx<span style=\"font-family:宋体\">再启动</span>nginx<span style=\"font-family:宋体\">即可将配置信息在</span>nginx<span style=\"font-family:宋体\">中生效，如下：</span></p><p>./nginx -s reload</p><p>&nbsp;</p><h1 style=\"margin-left:29px\"><span style=\"font-family:宋体\">测试</span></h1><p>nginx<span style=\"font-family:宋体\">安装成功，启动</span>nginx<span style=\"font-family:宋体\">，即可访问虚拟机上的</span>nginx<span style=\"font-family:宋体\">：</span></p><p><img src=\"/emd_blog/static/userImages/20180628/1530181681710092400.png\" title=\"1530181681710092400.png\" alt=\"image.png\"/></p><p>&nbsp;</p><p><span style=\"font-family:宋体\">到这说明</span>nginx<span style=\"font-family:宋体\">上安装成功。</span></p><h1 style=\"margin-left:29px\"><span style=\"font-family:宋体\">开机自启动</span>nginx</h1><h2 style=\"margin-top:auto;margin-bottom:auto;margin-left:38px;text-align:left;line-height:normal;page-break-after:auto\"><span style=\"font-family:宋体\">编写</span>shell<span style=\"font-family:宋体\">脚本</span></h2><p><span style=\"font-family:宋体\">这里使用的是编写</span>shell<span style=\"font-family:宋体\">脚本的方式来处理</span></p><p>&nbsp;</p><p>vi /etc/init.d/nginx&nbsp; (<span style=\"font-family:宋体\">输入下面的代码</span>)</p><p>&nbsp;</p><p>&nbsp;</p><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr class=\"firstRow\"><td width=\"568\" valign=\"top\" style=\"border: 1px solid windowtext; padding: 0px 7px;\"><p><span style=\"font-size:13px\">#!/bin/bash</span></p><p><span style=\"font-size:13px\"># nginx Startup script for the Nginx HTTP Server</span></p><p><span style=\"font-size:13px\"># it is v.0.0.2 version.</span></p><p><span style=\"font-size:13px\"># chkconfig: - 85 15</span></p><p><span style=\"font-size:13px\"># description: Nginx is a high-performance web and proxy server.</span></p><p><span style=\"font-size:13px\">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It has a lot of &nbsp; features, but it&#39;s not for everyone.</span></p><p><span style=\"font-size:13px\"># processname: nginx</span></p><p><span style=\"font-size:13px\"># pidfile: /var/run/nginx.pid</span></p><p><span style=\"font-size:13px\"># config: /usr/local/nginx/conf/nginx.conf</span></p><p><span style=\"font-size:13px\">nginxd=/usr/local/nginx/sbin/nginx</span></p><p><span style=\"font-size:13px\">nginx_config=/usr/local/nginx/conf/nginx.conf</span></p><p><span style=\"font-size:13px\">nginx_pid=/var/run/nginx.pid</span></p><p><span style=\"font-size:13px\">RETVAL=0</span></p><p><span style=\"font-size:13px\">prog=&quot;nginx&quot;</span></p><p><span style=\"font-size:13px\"># Source function library.</span></p><p><span style=\"font-size:13px\">. /etc/rc.d/init.d/functions</span></p><p><span style=\"font-size:13px\"># Source networking configuration.</span></p><p><span style=\"font-size:13px\">. /etc/sysconfig/network</span></p><p><span style=\"font-size:13px\"># Check that networking is up.</span></p><p><span style=\"font-size:13px\">[ ${NETWORKING} = &quot;no&quot; ] &amp;&amp; exit 0</span></p><p><span style=\"font-size:13px\">[ -x $nginxd ] || exit 0</span></p><p><span style=\"font-size:13px\"># Start nginx daemons functions.</span></p><p><span style=\"font-size:13px\">start() {</span></p><p><span style=\"font-size:13px\">if [ -e $nginx_pid ];then</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp; echo &quot;nginx already &nbsp; running....&quot;</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp; exit 1</span></p><p><span style=\"font-size:13px\">fi</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp; echo -n $&quot;Starting $prog: &nbsp; &quot;</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp; daemon $nginxd -c &nbsp; ${nginx_config}</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp; RETVAL=$?</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp; echo</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp; [ $RETVAL = 0 ] &amp;&amp; &nbsp; touch /var/lock/subsys/nginx</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp; return $RETVAL</span></p><p><span style=\"font-size:13px\">}</span></p><p><span style=\"font-size:13px\"># Stop nginx daemons functions.</span></p><p><span style=\"font-size:13px\">stop() {</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo -n $&quot;Stopping &nbsp; $prog: &quot;</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; killproc $nginxd</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RETVAL=$?</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;echo</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ $RETVAL = 0 ] &amp;&amp; &nbsp; rm -f /var/lock/subsys/nginx /var/run/nginx.pid</span></p><p><span style=\"font-size:13px\">}</span></p><p><span style=\"font-size:13px\"># reload nginx service functions.</span></p><p><span style=\"font-size:13px\">reload() {</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp; echo -n $&quot;Reloading &nbsp; $prog: &quot;</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp; #kill -HUP `cat ${nginx_pid}`</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp; killproc $nginxd -HUP</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp; RETVAL=$?</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp; echo</span></p><p><span style=\"font-size:13px\">}</span></p><p><span style=\"font-size:13px\"># See how we were called.</span></p><p><span style=\"font-size:13px\">case &quot;$1&quot; in</span></p><p><span style=\"font-size:13px\">start)</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; start</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;;</span></p><p><span style=\"font-size:13px\">stop)</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stop</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;;</span></p><p><span style=\"font-size:13px\">reload)</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reload</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;;</span></p><p><span style=\"font-size:13px\">restart)</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stop</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; start</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;;</span></p><p><span style=\"font-size:13px\">status)</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; status $prog</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RETVAL=$?</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;;</span></p><p><span style=\"font-size:13px\">*)</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $&quot;Usage: $prog &nbsp; {start|stop|restart|reload|status|help}&quot;</span></p><p><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exit 1</span></p><p><span style=\"font-size:13px\">esac</span></p><p><span style=\"font-size:13px\">exit $RETVAL</span></p><p><span style=\"font-size:13px\">&nbsp;</span></p></td></tr></tbody></table><p>&nbsp;</p><p>&nbsp;</p><p>:wq&nbsp; <span style=\"font-family:宋体\">保存并退出</span></p><p>&nbsp;</p><h2 style=\"margin-top:auto;margin-bottom:auto;margin-left:38px;text-align:left;line-height:normal;page-break-after:auto\"><span style=\"font-family:宋体\">设置文件的访问权限</span></h2><p>&nbsp;</p><p>chmod a+x /etc/init.d/nginx&nbsp;&nbsp; (a+x ==&gt; all user can execute&nbsp; <span style=\"font-family:宋体\">所有用户可执行</span>)</p><p>&nbsp;</p><p>&nbsp;</p><p><span style=\"font-family:宋体\">这样在控制台就很容易的操作</span>nginx<span style=\"font-family:宋体\">了：查看</span>Nginx<span style=\"font-family:宋体\">当前状态、启动</span>Nginx<span style=\"font-family:宋体\">、停止</span>Nginx<span style=\"font-family:宋体\">、重启</span>Nginx<span style=\"font-family:宋体\">…</span></p><p>&nbsp;<img src=\"/emd_blog/static/userImages/20180629/1530239607138019456.png\" title=\"1530239607138019456.png\" alt=\"image.png\"/></p><p><br/></p><p><span style=\"font-family:宋体\">如果修改了</span>nginx<span style=\"font-family:宋体\">的配置文件</span>nginx.conf<span style=\"font-family:宋体\">，也可以使用上面的命令重新加载新的配置文件并运行，可以将此命令加入到</span>rc.local<span style=\"font-family:宋体\">文件中，这样开机的时候</span>nginx<span style=\"font-family:宋体\">就默认启动了</span></p><p>&nbsp;<span style=\"font-family: 宋体;\">加入到</span>rc.local<span style=\"font-family: 宋体;\">文件中</span></p><p>vi /etc/rc.local</p><p>&nbsp;</p><p><span style=\"font-family:宋体\">加入一行</span>&nbsp; /etc/init.d/nginx start&nbsp;&nbsp;&nbsp; <span style=\"font-family:宋体\">保存并退出，下次重启会生效。</span></p><p><strong><span style=\"font-size:24px;font-family:宋体;color:#333333;background:white\">注意：解决</span></strong><strong><span style=\"font-size:24px;font-family:&#39;Arial&#39;,&#39;sans-serif&#39;;color:#333333;background:white\">nginx</span></strong><strong><span style=\"font-size:24px;font-family: 宋体;color:#333333;background:white\">重启</span></strong><strong><span style=\"font-size:24px;font-family:&#39;Arial&#39;,&#39;sans-serif&#39;;color:#333333;background:white\">“var/run/nginx/nginx.pid&quot; no such file or directory</span></strong><strong><span style=\"font-size:24px;font-family:宋体;color:#333333;background:white\">问题：</span></strong></p><p><span style=\"font-family:宋体;color:#4F4F4F;background:white\">方法一（已试过可行）：</span><span style=\"font-family:&#39;Arial&#39;,&#39;sans-serif&#39;;color:#4F4F4F;background:white\">&nbsp;</span><span style=\"font-family: &#39;Arial&#39;,&#39;sans-serif&#39;;color:#4F4F4F\"><br/> </span><span style=\"font-family:宋体;color:#4F4F4F;background:white\">到</span><span style=\"font-family:&#39;Arial&#39;,&#39;sans-serif&#39;;color:#4F4F4F;background: white\">/var/run</span><span style=\"font-family:宋体;color:#4F4F4F;background:white\">下看没有</span><span style=\"font-family:&#39;Arial&#39;,&#39;sans-serif&#39;;color:#4F4F4F;background:white\">nginx</span><span style=\"font-family:宋体;color:#4F4F4F;background:white\">这个目录，创建</span><span style=\"font-family:&#39;Arial&#39;,&#39;sans-serif&#39;;color:#4F4F4F;background:white\">/var/run/nginx</span><span style=\"font-family:宋体;color:#4F4F4F;background:white\">，再启动。</span></p><p><br/></p>', '20', 'nginx', 'nginx是C语言开发，建议在linux上运行，本教程使用Centos6.5作为安装环境。n  gcc         安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc：yum install gcc-c++n  PCRE         PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。yum install -y pcre pcre-devel注：pcre-devel是使用pcre开发的一个二次开发库。nginx也需要此库。n  zlib         zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。yum install -y zlib zlib-devel n  openssl         OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。         nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。yum install -y openssl openssl-devel编译安装将nginx-1.8.0.tar.gz拷贝至linux服务器。 解压：tar -zxvf nginx-1.8.0.tar.gzcd nginx-1.8.0 1、  configure./configure --help查询详细参数（参考本教程附录部分：nginx编译参数） 参数设置如下：./configure \\--prefix=/usr/local/nginx \\--pid-path=/var/run/nginx/nginx.pid \\--lock-path=/var/lock/nginx.lock \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--with-http_gzip_static_module \\--http-client-body-temp-path=/var/temp/nginx/client \\--http-proxy-temp-path=/var/temp/nginx/proxy \\--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\--http-scgi-temp-path=/var/temp/nginx/scgi 注意：上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录  2、  编译安装makemake  install 安装成功查看安装目录 ：  启动nginxcd /usr/local/nginx/sbin/./nginx 查询nginx进程： 15098是nginx主进程的进程id，15099是nginx工作进程的进程id 注意：执行./nginx启动nginx，这里可以-c指定加载的nginx配置文件，如下：./nginx -c /usr/local/nginx/conf/nginx.conf如果不指定-c，nginx在启动时默认加载conf/nginx.conf文件，此文件的地址也可以在编译安装nginx时指定./configure的参数（--conf-path= 指向配置文件（nginx.conf）） 停止nginx方式1，快速停止：cd /usr/local/nginx/sbin./nginx -s stop此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。 方式2，完整停止(建议使用)：cd /usr/local/nginx/sbin./nginx -s quit此方式停止步骤是待nginx进程处理任务完毕进行停止。  重启nginx方式1，先停止再启动（建议使用）：对nginx进行重启相当于先停止nginx再启动nginx，即先执行停止命令再执行启动命令。如下：./nginx -s quit./nginx 方式2，重新加载配置文件：当nginx的配置文件nginx.conf修改后，要想让配置生效需要重启nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效，如下：./nginx -s reload 测试nginx安装成功，启动nginx，即可访问虚拟机上的nginx： 到这说明nginx上安装成功。开机自启动nginx编写shell脚本这里使用的是编写shell脚本的方式来处理 vi /etc/init.d/nginx  (输入下面的代码)  #!/bin/bash# nginx Startup script for the Nginx HTTP Server# it is v.0.0.2 version.# chkconfig: - 85 15# description: Nginx is a high-performance web and proxy server.#              It has a lot of   features, but it\'s not for everyone.# processname: nginx# pidfile: /var/run/nginx.pid# config: /usr/local/nginx/conf/nginx.confnginxd=/usr/local/nginx/sbin/nginxnginx_config=/usr/local/nginx/conf/nginx.confnginx_pid=/var/run/nginx.pidRETVAL=0prog=\"nginx\"# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ ${NETWORKING} = \"no\" ] && exit 0[ -x $nginxd ] || exit 0# Start nginx daemons functions.start() {if [ -e $nginx_pid ];then   echo \"nginx already   running....\"   exit 1fi   echo -n $\"Starting $prog:   \"   daemon $nginxd -c   ${nginx_config}   RETVAL=$?   echo   [ $RETVAL = 0 ] &&   touch /var/lock/subsys/nginx   return $RETVAL}# Stop nginx daemons functions.stop() {        echo -n $\"Stopping   $prog: \"        killproc $nginxd        RETVAL=$?        echo        [ $RETVAL = 0 ] &&   rm -f /var/lock/subsys/nginx /var/run/nginx.pid}# reload nginx service functions.reload() {    echo -n $\"Reloading   $prog: \"    #kill -HUP `cat ${nginx_pid}`    killproc $nginxd -HUP    RETVAL=$?    echo}# See how we were called.case \"$1\" instart)        start        ;;stop)        stop        ;;reload)        reload        ;;restart)        stop        start        ;;status)        status $prog        RETVAL=$?        ;;*)        echo $\"Usage: $prog   {start|stop|restart|reload|status|help}\"        exit 1esacexit $RETVAL   :wq  保存并退出 设置文件的访问权限 chmod a+x /etc/init.d/nginx   (a+x ==> all user can execute  所有用户可执行)  这样在控制台就很容易的操作nginx了：查看Nginx当前状态、启动Nginx、停止Nginx、重启Nginx… 如果修改了nginx的配置文件nginx.conf，也可以使用上面的命令重新加载新的配置文件并运行，可以将此命令加入到rc.local文件中，这样开机的时候nginx就默认启动了 加入到rc.local文件中vi /etc/rc.local 加入一行  /etc/init.d/nginx start    保存并退出，下次重启会生效。注意：解决nginx重启“var/run/nginx/nginx.pid\" no such file or directory问题：方法一（已试过可行）：  到/var/run下看没有nginx这个目录，创建/var/run/nginx，再启动。', 'ue');
INSERT INTO `t_blog` VALUES ('11', '【Maven】maven项目pom.xml中tomcat插件的关于端口号问题', '2 可以设置<path>为/  端口号为80  这样访问项目时候可以省略项目名和端口号注意 ：只有配置为80端口才能省略端口号具体请看下面的pom配置文件。<!-- 配置构建jdk版本以及tomcat,maven版本 -->	<build>		<finalName>emd_blog</finalName>		', '2018-06-28 19:14:30', '3', '0', '<p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">2 可以设置&lt;path&gt;为/&nbsp; 端口号为80&nbsp; 这样访问项目时候可以省略项目名和端口号</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">注意 ：只有配置为80端口才能省略端口号</p><p style=\"box-sizing: border-box; outline: 0px; padding: 0px; margin-top: 0px; margin-bottom: 16px; color: rgb(79, 79, 79); line-height: 26px; text-align: justify; word-break: break-all; font-family: -apple-system, &quot;SF UI Text&quot;, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif, SimHei, SimSun; white-space: normal; background-color: rgb(255, 255, 255);\">具体请看下面的pom配置文件。</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;配置构建jdk版本以及tomcat,maven版本&nbsp;--&gt;\n	&lt;build&gt;\n		&lt;finalName&gt;emd_blog&lt;/finalName&gt;\n		&lt;pluginManagement&gt;\n			&lt;plugins&gt;\n				&lt;plugin&gt;\n					&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n					&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n					&lt;version&gt;3.2&lt;/version&gt;\n					&lt;configuration&gt;\n						&lt;source&gt;1.8&lt;/source&gt;\n						&lt;target&gt;1.8&lt;/target&gt;\n						&lt;encoding&gt;UTF-8&lt;/encoding&gt;\n						&lt;showWarnings&gt;true&lt;/showWarnings&gt;\n					&lt;/configuration&gt;\n				&lt;/plugin&gt;\n				&lt;plugin&gt;\n					&lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n					&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n					&lt;version&gt;2.2&lt;/version&gt;\n					&lt;!--&nbsp;端口&nbsp;--&gt;\n					&lt;configuration&gt;\n					&lt;port&gt;80&lt;/port&gt;\n					&lt;!--&nbsp;访问路径&nbsp;--&gt;\n					&lt;path&gt;/&lt;/path&gt;\n					&lt;!--&nbsp;&lt;contextReloadable&gt;true&lt;/contextReloadable&gt;&nbsp;--&gt;\n					&lt;/configuration&gt;\n				&lt;/plugin&gt;\n			&lt;/plugins&gt;\n		&lt;/pluginManagement&gt;\n		\n		\n		&nbsp;&nbsp;&lt;!--在IDEA中maven&nbsp;默认编译的时候&nbsp;只搬运src/main/java里面的java文件到target/classes,其他文件会被忽略&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--这时，我们Mybatis的Mapper.xml文件就不能被加载进去，也就是不能映射成功&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--下面配置就能解决这个问题&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;resources&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;resource&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;directory&gt;src/main/java&lt;/directory&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;includes&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&gt;**/*.properties&lt;/include&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&gt;**/*.xml&lt;/include&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/includes&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filtering&gt;false&lt;/filtering&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/resource&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;由于修改了默认的resource目录，导致src/main/resources的所有文件都不能被扫描，因此还要配多一个&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;resource&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;directory&gt;src/main/resources&lt;/directory&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;includes&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&gt;**/*.properties&lt;/include&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&gt;**/*.xml&lt;/include&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/includes&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;filtering&gt;false&lt;/filtering&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/resource&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/resources&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;\n	&lt;/build&gt;</pre><p><br/></p>', '12', 'maven', '2 可以设置<path>为/  端口号为80  这样访问项目时候可以省略项目名和端口号注意 ：只有配置为80端口才能省略端口号具体请看下面的pom配置文件。<!-- 配置构建jdk版本以及tomcat,maven版本 -->	<build>		<finalName>emd_blog</finalName>		<pluginManagement>			<plugins>				<plugin>					<groupId>org.apache.maven.plugins</groupId>					<artifactId>maven-compiler-plugin</artifactId>					<version>3.2</version>					<configuration>						<source>1.8</source>						<target>1.8</target>						<encoding>UTF-8</encoding>						<showWarnings>true</showWarnings>					</configuration>				</plugin>				<plugin>					<groupId>org.apache.tomcat.maven</groupId>					<artifactId>tomcat7-maven-plugin</artifactId>					<version>2.2</version>					<!-- 端口 -->					<configuration>					<port>80</port>					<!-- 访问路径 -->					<path>/</path>					<!-- <contextReloadable>true</contextReloadable> -->					</configuration>				</plugin>			</plugins>		</pluginManagement>						  <!--在IDEA中maven 默认编译的时候 只搬运src/main/java里面的java文件到target/classes,其他文件会被忽略 -->        <!--这时，我们Mybatis的Mapper.xml文件就不能被加载进去，也就是不能映射成功 -->        <!--下面配置就能解决这个问题 -->        <resources>            <resource>                <directory>src/main/java</directory>                <includes>                    <include>**/*.properties</include>                    <include>**/*.xml</include>                </includes>                <filtering>false</filtering>            </resource>            <!-- 由于修改了默认的resource目录，导致src/main/resources的所有文件都不能被扫描，因此还要配多一个 -->            <resource>                <directory>src/main/resources</directory>                <includes>                    <include>**/*.properties</include>                    <include>**/*.xml</include>                </includes>                <filtering>false</filtering>            </resource>        </resources>        <defaultGoal>compile</defaultGoal>	</build>', 'ue');
INSERT INTO `t_blog` VALUES ('12', '【Zookeeper】Apache  Zookeeper安装图解', '', '2018-06-29 10:37:46', '10', '0', '<p><img class=\"loadingclass\" id=\"loading_jizdagsp\" src=\"http://localhost/emd_blog/static/ueditor/themes/default/images/spacer.gif\" title=\"正在上传...\"/><img src=\"/emd_blog/static/userImages/20180629/1530239845268013795.png\" title=\"1530239845268013795.png\" alt=\"image.png\"/></p>', '21', 'Zookeeper', '', 'ue');
INSERT INTO `t_blog` VALUES ('13', '【Dubbo】Dubbo-admin安装图解,直接部署war包方式', '【Dubbo】Dubbo-admin安装图解,直接部署war包方式：', '2018-06-29 10:45:14', '5', '0', '<p>【Dubbo】Dubbo-admin安装图解,直接部署war包方式：</p><p><img src=\"/emd_blog/static/userImages/20180629/1530240284955051898.png\" title=\"1530240284955051898.png\" alt=\"image.png\"/></p>', '22', 'Dubbo', '【Dubbo】Dubbo-admin安装图解,直接部署war包方式：', 'ue');
INSERT INTO `t_blog` VALUES ('15', '【Intellij IDEA 】Intellij IDEA中 maven打包时跳过测试类', '配置这个install -Dmaven.test.skip=true， 可以跳过business项目本地启动自动跑测试用例：', '2018-06-29 17:26:01', '11', '0', '<p>配置这个install -Dmaven.test.skip=true， 可以跳过business项目本地启动自动跑测试用例：</p><p><br/></p><p><img src=\"/emd_blog/static/userImages/20180629/1530264352797014022.png\" title=\"1530264352797014022.png\" alt=\"image.png\"/></p><p><br/></p>', '24', 'Intellij IDEA ', '配置这个install -Dmaven.test.skip=true， 可以跳过business项目本地启动自动跑测试用例：', 'ue');
INSERT INTO `t_blog` VALUES ('27', '【JDK】Linux安装源码包JDK完整步骤', '##### 【JDK】Linux安装源码包JDK完整步骤\n\n1、检查一下系统中的jdk版本\n\n```shell\n[root@localhost software]# java -version\n```\n显示：\n\n```shell\nopenjdk version \"1.8.0_102\"\nOpenJDK Runt', '2018-07-02 16:00:53', '6', '0', '<h5 id=\"h5--jdk-linux-jdk-\"><a name=\"【JDK】Linux安装源码包JDK完整步骤\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>【JDK】Linux安装源码包JDK完整步骤</h5><p>1、检查一下系统中的jdk版本</p>\n<pre><code class=\"lang-shell\">[root@localhost software]# java -version\n</code></pre>\n<p>显示：</p>\n<pre><code class=\"lang-shell\">openjdk version \"1.8.0_102\"\nOpenJDK Runtime Environment (build 1.8.0_102-b14)\nOpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)\n</code></pre>\n<p>2、检测jdk安装包</p>\n<pre><code class=\"lang-shell\">[root@localhost software]# rpm -qa | grep java`\n    java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64\n    python-javapackages-3.4.1-11.el7.noarch\n    tzdata-java-2016g-2.el7.noarch\n    javapackages-tools-3.4.1-11.el7.noarch\n    java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64\n    java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64\n    java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64\n</code></pre>\n<p>3、卸载openjdk</p>\n<pre><code class=\"lang-shell\">[root@localhost software]# rpm -e --nodeps tzdata-java-2016g-2.el7.noarch\n[root@localhost software]# rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64\n</code></pre>\n<p>或者使用</p>\n<pre><code class=\"lang-shell\">[root@localhost jvm]# yum remove *openjdk*\n之后再次输入rpm -qa | grep java 查看卸载情况：\n\n[root@localhost software]# rpm -qa | grep java\npython-javapackages-3.4.1-11.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\n</code></pre>\n<p>4、安装新的jdk</p>\n<p>首先到jdk官网上下载你想要的jdk版本，下载完成之后将需要安装的jdk安装包放到Linux系统指定的文件夹下，并且命令进入该文件夹下：</p>\n<pre><code class=\"lang-shell\">[root@localhost software]# ll\ntotal 252664\n-rw-r--r--. 1 root root  11830603 Jun  9 06:43 alibaba-rocketmq-3.2.6.tar.gz\n-rw-r--r--. 1 root root  43399561 Jun  9 06:42 apache-activemq-5.11.1-bin.tar.gz\n-rwxrw-rw-. 1 root root 185540433 Apr 21 09:06 jdk-8u131-linux-x64.tar.gz\n-rw-r--r--. 1 root root   1547695 Jun  9 06:44 redis-3.2.9.tar.gz\n-rw-r--r--. 1 root root  16402010 Jun  9 06:40 zookeeper-3.4.5.tar.gz\n</code></pre>\n<p>解压 jdk-8u131-linux-x64.tar.gz安装包</p>\n<pre><code class=\"lang-shell\">[root@localhost software]# mkdir -p /usr/lib/jvm\n[root@localhost software]# tar -zxvf jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm\n</code></pre>\n<p>5、设置环境变量</p>\n<pre><code class=\"lang-shell\">[root@localhost software]# vim /etc/profile\n</code></pre>\n<p>在最前面添加：</p>\n<pre><code class=\"lang-shell\">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_131  \nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport  PATH=${JAVA_HOME}/bin:$PATH\n</code></pre>\n<p>6、执行profile文件</p>\n<pre><code class=\"lang-shell\">[root@localhost software]# source /etc/profile\n</code></pre>\n<p>这样可以使配置不用重启即可立即生效。</p>\n<p>7、检查新安装的jdk</p>\n<pre><code class=\"lang-shell\">\n[root@localhost software]# java -version\n</code></pre>\n<p>显示：</p>\n<pre><code class=\"lang-shell\">\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\n</code></pre>\n<p>到此为止，整个安装过程结束。</p>\n', '23', 'jdk', '##### 【JDK】Linux安装源码包JDK完整步骤\n\n1、检查一下系统中的jdk版本\n\n```shell\n[root@localhost software]# java -version\n```\n显示：\n\n```shell\nopenjdk version \"1.8.0_102\"\nOpenJDK Runtime Environment (build 1.8.0_102-b14)\nOpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)\n```\n2、检测jdk安装包\n\n```shell\n[root@localhost software]# rpm -qa | grep java`\n    java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64\n    python-javapackages-3.4.1-11.el7.noarch\n    tzdata-java-2016g-2.el7.noarch\n    javapackages-tools-3.4.1-11.el7.noarch\n    java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64\n    java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64\n    java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64\n```\n\n3、卸载openjdk\n\n```shell\n[root@localhost software]# rpm -e --nodeps tzdata-java-2016g-2.el7.noarch\n[root@localhost software]# rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64\n```\n或者使用\n\n```shell\n[root@localhost jvm]# yum remove *openjdk*\n之后再次输入rpm -qa | grep java 查看卸载情况：\n\n[root@localhost software]# rpm -qa | grep java\npython-javapackages-3.4.1-11.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\n```\n\n4、安装新的jdk\n\n首先到jdk官网上下载你想要的jdk版本，下载完成之后将需要安装的jdk安装包放到Linux系统指定的文件夹下，并且命令进入该文件夹下：\n```shell\n[root@localhost software]# ll\ntotal 252664\n-rw-r--r--. 1 root root  11830603 Jun  9 06:43 alibaba-rocketmq-3.2.6.tar.gz\n-rw-r--r--. 1 root root  43399561 Jun  9 06:42 apache-activemq-5.11.1-bin.tar.gz\n-rwxrw-rw-. 1 root root 185540433 Apr 21 09:06 jdk-8u131-linux-x64.tar.gz\n-rw-r--r--. 1 root root   1547695 Jun  9 06:44 redis-3.2.9.tar.gz\n-rw-r--r--. 1 root root  16402010 Jun  9 06:40 zookeeper-3.4.5.tar.gz\n```\n\n解压 jdk-8u131-linux-x64.tar.gz安装包\n\n```shell\n[root@localhost software]# mkdir -p /usr/lib/jvm\n[root@localhost software]# tar -zxvf jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm\n```\n5、设置环境变量\n\n```shell\n[root@localhost software]# vim /etc/profile\n```\n\n在最前面添加：\n\n```shell\nexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_131  \nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport  PATH=${JAVA_HOME}/bin:$PATH\n```\n6、执行profile文件\n\n```shell\n[root@localhost software]# source /etc/profile\n```\n这样可以使配置不用重启即可立即生效。\n\n7、检查新安装的jdk\n```shell\n\n[root@localhost software]# java -version\n```\n显示：\n```shell\n\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\n```\n到此为止，整个安装过程结束。', 'md');
INSERT INTO `t_blog` VALUES ('31', '【JAVASE】Java中short、int、long、float、double的取值范围', '一、基本数据类型的特点，位数，最大值和最小值。\n\n基本类型：short 二进制位数：16 \n包装类：java.lang.Short \n最小值：Short.MIN_VALUE=-32768 （-2的15此方）\n最大值：Short.MAX_VALUE=32767 （2的15次方-1）\n\n\n基本类型：int 二进制', '2018-07-05 09:47:45', '3', '0', '<p>一、基本数据类型的特点，位数，最大值和最小值。</p>\n<p>基本类型：short 二进制位数：16<br>包装类：java.lang.Short<br>最小值：Short.MIN_VALUE=-32768 （-2的15此方）<br>最大值：Short.MAX_VALUE=32767 （2的15次方-1）\n<p>基本类型：int 二进制位数：32<br>包装类：java.lang.Integer<br>最小值：Integer.MIN_VALUE= -2147483648 （-2的31次方）<br>最大值：Integer.MAX_VALUE= 2147483647  （2的31次方-1）\n<p>基本类型：long 二进制位数：64<br>包装类：java.lang.Long<br>最小值：Long.MIN_VALUE=-9223372036854775808 （-2的63次方）<br>最大值：Long.MAX_VALUE=9223372036854775807 （2的63次方-1）\n<p>基本类型：float 二进制位数：32<br>包装类：java.lang.Float<br>最小值：Float.MIN_VALUE=1.4E-45 （2的-149次方）<br>最大值：Float.MAX_VALUE=3.4028235E38 （2的128次方-1）\n<p>基本类型：double 二进制位数：64<br>包装类：java.lang.Double<br>最小值：Double.MIN_VALUE=4.9E-324 （2的-1074次方）<br>最大值：Double.MAX_VALUE=1.7976931348623157E308 （2的1024次方-1）\n<p>基本类型    字节数    位数    最大值    最小值<br>byte    1byte    8bit    2^7 - 1    -2^7<br>short    2byte    16bit    2^15 - 1    -2^15<br>int    4byte    32bit    2^31 - 1    -2^31<br>long    8byte    64bit    2^63 - 1    -2^63<br>float    4byte    32bit    3.4028235E38    1.4E - 45<br>double    8byte    64bit    1.7976931348623157E308    4.9E - 324<br>char    2byte    16bit    2^16 - 1    0\n', '1', 'JAVASE', '一、基本数据类型的特点，位数，最大值和最小值。\n\n基本类型：short 二进制位数：16 \n包装类：java.lang.Short \n最小值：Short.MIN_VALUE=-32768 （-2的15此方）\n最大值：Short.MAX_VALUE=32767 （2的15次方-1）\n\n\n基本类型：int 二进制位数：32\n包装类：java.lang.Integer\n最小值：Integer.MIN_VALUE= -2147483648 （-2的31次方）\n最大值：Integer.MAX_VALUE= 2147483647  （2的31次方-1）\n\n\n基本类型：long 二进制位数：64\n包装类：java.lang.Long\n最小值：Long.MIN_VALUE=-9223372036854775808 （-2的63次方）\n最大值：Long.MAX_VALUE=9223372036854775807 （2的63次方-1）\n\n基本类型：float 二进制位数：32\n包装类：java.lang.Float\n最小值：Float.MIN_VALUE=1.4E-45 （2的-149次方）\n最大值：Float.MAX_VALUE=3.4028235E38 （2的128次方-1）\n\n基本类型：double 二进制位数：64\n包装类：java.lang.Double\n最小值：Double.MIN_VALUE=4.9E-324 （2的-1074次方）\n最大值：Double.MAX_VALUE=1.7976931348623157E308 （2的1024次方-1）\n\n\n基本类型	字节数	位数	最大值	最小值\nbyte	1byte	8bit	2^7 - 1	-2^7\nshort	2byte	16bit	2^15 - 1	-2^15\nint	4byte	32bit	2^31 - 1	-2^31\nlong	8byte	64bit	2^63 - 1	-2^63\nfloat	4byte	32bit	3.4028235E38	1.4E - 45\ndouble	8byte	64bit	1.7976931348623157E308	4.9E - 324\nchar	2byte	16bit	2^16 - 1	0\n', 'md');
INSERT INTO `t_blog` VALUES ('32', '【Redis】Linux下 Redis的 安装 启动 连接 配置 重启 详解 ', '###### Redis安装图解\n```shell\n# wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n# tar xzf redis-2.8.17.tar.gz\n# cd redis-2.8.17\n# make\n```\n启动redis服务', '2018-07-05 15:14:05', '10', '0', '<h6 id=\"h6-redis-\"><a name=\"Redis安装图解\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Redis安装图解</h6><pre><code class=\"lang-shell\"># wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n# tar xzf redis-2.8.17.tar.gz\n# cd redis-2.8.17\n# make\n</code></pre>\n<p>启动redis服务</p>\n<pre><code class=\"lang-shell\"># cd src\n# ./redis-server\n</code></pre>\n<p>上面这种启动 redis使用的是默认配置，也可以通过启动参数告诉redis使用指定配置</p>\n<pre><code class=\"lang-shell\"># ./redis-server redis.config\n</code></pre>\n<p>连接redis</p>\n<pre><code class=\"lang-shell\">[root@localhost src]# ./redis-cli\n127.0.0.1:6379&gt;\n</code></pre>\n<p>redis配置</p>\n<p>redis的配置文件位于Redis安装目录下，文件名为 redis.conf。</p>\n<p>可以通过CONFIG命令查看或者设置配置项</p>\n<p>实例：</p>\n<pre><code class=\"lang-shell\">127.0.0.1:6379&gt; config get loglevel\n1) \"loglevel\"\n2) \"notice\"\n</code></pre>\n<p>使用 * 获取所有配置项</p>\n<pre><code class=\"lang-shell\">127.0.0.1:6379&gt; config get *\n  1) \"dbfilename\"\n  2) \"dump.rdb\"\n  3) \"requirepass\"\n  4) \"\"\n  5) \"masterauth\"\n  6) \"\"\n  7) \"unixsocket\"\n  8) \"\"\n  9) \"logfile\"\n 10) \"\"\n 11) \"pidfile\"\n 12) \"/var/run/redis.pid\"\n 13) \"maxmemory\"\n 14) \"0\"\n 15) \"maxmemory-samples\"\n 16) \"3\"\n 17) \"timeout\"\n 18) \"0\"\n 19) \"tcp-keepalive\"\n 20) \"0\"\n 21) \"auto-aof-rewrite-percentage\"\n 22) \"100\"\n 23) \"auto-aof-rewrite-min-size\"\n 24) \"67108864\"\n 25) \"hash-max-ziplist-entries\"\n 26) \"512\"\n 27) \"hash-max-ziplist-value\"\n 28) \"64\"\n 29) \"list-max-ziplist-entries\"\n 30) \"512\"\n 31) \"list-max-ziplist-value\"\n 32) \"64\"\n 33) \"set-max-intset-entries\"\n 34) \"512\"\n 35) \"zset-max-ziplist-entries\"\n 36) \"128\"\n 37) \"zset-max-ziplist-value\"\n 38) \"64\"\n 39) \"hll-sparse-max-bytes\"\n 40) \"3000\"\n 41) \"lua-time-limit\"\n 42) \"5000\"\n 43) \"slowlog-log-slower-than\"\n 44) \"10000\"\n 45) \"latency-monitor-threshold\"\n 46) \"0\"\n 47) \"slowlog-max-len\"\n 48) \"128\"\n 49) \"port\"\n 50) \"6379\"\n 51) \"tcp-backlog\"\n 52) \"511\"\n 53) \"databases\"\n 54) \"16\"\n 55) \"repl-ping-slave-period\"\n 56) \"10\"\n 57) \"repl-timeout\"\n 58) \"60\"\n 59) \"repl-backlog-size\"\n 60) \"1048576\"\n 61) \"repl-backlog-ttl\"\n 62) \"3600\"\n 63) \"maxclients\"\n 64) \"10000\"\n 65) \"watchdog-period\"\n 66) \"0\"\n 67) \"slave-priority\"\n 68) \"100\"\n 69) \"min-slaves-to-write\"\n 70) \"0\"\n 71) \"min-slaves-max-lag\"\n 72) \"10\"\n 73) \"hz\"\n 74) \"10\"\n 75) \"no-appendfsync-on-rewrite\"\n 76) \"no\"\n 77) \"slave-serve-stale-data\"\n 78) \"yes\"\n 79) \"slave-read-only\"\n 80) \"yes\"\n 81) \"stop-writes-on-bgsave-error\"\n 82) \"yes\"\n 83) \"daemonize\"\n 84) \"no\"\n 85) \"rdbcompression\"\n 86) \"yes\"\n 87) \"rdbchecksum\"\n 88) \"yes\"\n 89) \"activerehashing\"\n 90) \"yes\"\n 91) \"repl-disable-tcp-nodelay\"\n 92) \"no\"\n 93) \"aof-rewrite-incremental-fsync\"\n 94) \"yes\"\n 95) \"aof-load-truncated\"\n 96) \"yes\"\n 97) \"appendonly\"\n 98) \"no\"\n 99) \"dir\"\n100) \"/home/lxg/redis/redis-2.8.17/src\"\n101) \"maxmemory-policy\"\n102) \"volatile-lru\"\n103) \"appendfsync\"\n104) \"everysec\"\n105) \"save\"\n106) \"3600 1 300 100 60 10000\"\n107) \"loglevel\"\n108) \"notice\"\n109) \"client-output-buffer-limit\"\n110) \"normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60\"\n111) \"unixsocketperm\"\n112) \"0\"\n113) \"slaveof\"\n114) \"\"\n115) \"notify-keyspace-events\"\n116) \"\"\n117) \"bind\"\n118) \"\"\n</code></pre>\n<pre><code class=\"lang-shell\">redis.conf 配置项说明如下：\n1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\n    daemonize no\n2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\n    pidfile /var/run/redis.pid\n3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字\n    port 6379\n4. 绑定的主机地址\n    bind 127.0.0.1\n5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\n    timeout 300\n6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\n    loglevel verbose\n7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\n    logfile stdout\n8. 设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id\n    databases 16\n9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n    save &lt;seconds&gt; &lt;changes&gt;\n    Redis默认配置文件中提供了三个条件：\n    save 900 1\n    save 300 10\n    save 60 10000\n    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\n\n10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\n    rdbcompression yes\n11. 指定本地数据库文件名，默认值为dump.rdb\n    dbfilename dump.rdb\n12. 指定本地数据库存放目录\n    dir ./\n13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\n    slaveof &lt;masterip&gt; &lt;masterport&gt;\n14. 当master服务设置了密码保护时，slav服务连接master的密码\n    masterauth &lt;master-password&gt;\n15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭\n    requirepass foobared\n16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\n    maxclients 128\n17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\n    maxmemory &lt;bytes&gt;\n18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\n    appendonly no\n19. 指定更新日志文件名，默认为appendonly.aof\n     appendfilename appendonly.aof\n20. 指定更新日志条件，共有3个可选值： \n    no：表示等操作系统进行数据缓存同步到磁盘（快） \n    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） \n    everysec：表示每秒同步一次（折衷，默认值）\n    appendfsync everysec\n\n21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\n     vm-enabled no\n22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\n     vm-swap-file /tmp/redis.swap\n23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\n     vm-max-memory 0\n24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\n     vm-page-size 32\n25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\n     vm-pages 134217728\n26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\n     vm-max-threads 4\n27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\n    glueoutputbuf yes\n28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\n    hash-max-zipmap-entries 64\n    hash-max-zipmap-value 512\n29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\n    activerehashing yes\n30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\n    include /path/to/local.conf\n\n参数说明\n</code></pre>\n<p>可以通过修改redis.conf文件或者使用config set 命令来修改配置</p>\n<pre><code class=\"lang-shell\">127.0.0.1:6379&gt; config set loglevel \'notice\'\nOK\n</code></pre>\n<p>如何停止/启动/重启redis服务</p>\n<p>如果是用apt-get或者yum install安装的redis，可以直接通过下面的命令停止/启动/重启redis</p>\n<pre><code class=\"lang-shell\">/etc/init.d/redis-server stop\n/etc/init.d/redis-server start\n/etc/init.d/redis-server restart\n</code></pre>\n<p>如果是通过源码安装的redis，则可以通过redis的客户端程序redis-cli的shutdown命令来重启redis</p>\n<pre><code class=\"lang-shell\">redis-cli -h 127.0.0.1 -p 6379 shutdown\n</code></pre>\n<p>如果上述方式都没有成功停止redis，则可以使用终极武器 kill -9</p>\n', '18', 'Redis', '###### Redis安装图解\n```shell\n# wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n# tar xzf redis-2.8.17.tar.gz\n# cd redis-2.8.17\n# make\n```\n启动redis服务\n\n```shell\n# cd src\n# ./redis-server\n```\n上面这种启动 redis使用的是默认配置，也可以通过启动参数告诉redis使用指定配置\n\n```shell\n# ./redis-server redis.config\n```\n连接redis\n\n```shell\n[root@localhost src]# ./redis-cli\n127.0.0.1:6379> \n```\nredis配置\n\nredis的配置文件位于Redis安装目录下，文件名为 redis.conf。\n\n可以通过CONFIG命令查看或者设置配置项\n\n实例：\n\n```shell\n127.0.0.1:6379> config get loglevel\n1) \"loglevel\"\n2) \"notice\"\n```\n使用 * 获取所有配置项\n\n```shell\n127.0.0.1:6379> config get *\n  1) \"dbfilename\"\n  2) \"dump.rdb\"\n  3) \"requirepass\"\n  4) \"\"\n  5) \"masterauth\"\n  6) \"\"\n  7) \"unixsocket\"\n  8) \"\"\n  9) \"logfile\"\n 10) \"\"\n 11) \"pidfile\"\n 12) \"/var/run/redis.pid\"\n 13) \"maxmemory\"\n 14) \"0\"\n 15) \"maxmemory-samples\"\n 16) \"3\"\n 17) \"timeout\"\n 18) \"0\"\n 19) \"tcp-keepalive\"\n 20) \"0\"\n 21) \"auto-aof-rewrite-percentage\"\n 22) \"100\"\n 23) \"auto-aof-rewrite-min-size\"\n 24) \"67108864\"\n 25) \"hash-max-ziplist-entries\"\n 26) \"512\"\n 27) \"hash-max-ziplist-value\"\n 28) \"64\"\n 29) \"list-max-ziplist-entries\"\n 30) \"512\"\n 31) \"list-max-ziplist-value\"\n 32) \"64\"\n 33) \"set-max-intset-entries\"\n 34) \"512\"\n 35) \"zset-max-ziplist-entries\"\n 36) \"128\"\n 37) \"zset-max-ziplist-value\"\n 38) \"64\"\n 39) \"hll-sparse-max-bytes\"\n 40) \"3000\"\n 41) \"lua-time-limit\"\n 42) \"5000\"\n 43) \"slowlog-log-slower-than\"\n 44) \"10000\"\n 45) \"latency-monitor-threshold\"\n 46) \"0\"\n 47) \"slowlog-max-len\"\n 48) \"128\"\n 49) \"port\"\n 50) \"6379\"\n 51) \"tcp-backlog\"\n 52) \"511\"\n 53) \"databases\"\n 54) \"16\"\n 55) \"repl-ping-slave-period\"\n 56) \"10\"\n 57) \"repl-timeout\"\n 58) \"60\"\n 59) \"repl-backlog-size\"\n 60) \"1048576\"\n 61) \"repl-backlog-ttl\"\n 62) \"3600\"\n 63) \"maxclients\"\n 64) \"10000\"\n 65) \"watchdog-period\"\n 66) \"0\"\n 67) \"slave-priority\"\n 68) \"100\"\n 69) \"min-slaves-to-write\"\n 70) \"0\"\n 71) \"min-slaves-max-lag\"\n 72) \"10\"\n 73) \"hz\"\n 74) \"10\"\n 75) \"no-appendfsync-on-rewrite\"\n 76) \"no\"\n 77) \"slave-serve-stale-data\"\n 78) \"yes\"\n 79) \"slave-read-only\"\n 80) \"yes\"\n 81) \"stop-writes-on-bgsave-error\"\n 82) \"yes\"\n 83) \"daemonize\"\n 84) \"no\"\n 85) \"rdbcompression\"\n 86) \"yes\"\n 87) \"rdbchecksum\"\n 88) \"yes\"\n 89) \"activerehashing\"\n 90) \"yes\"\n 91) \"repl-disable-tcp-nodelay\"\n 92) \"no\"\n 93) \"aof-rewrite-incremental-fsync\"\n 94) \"yes\"\n 95) \"aof-load-truncated\"\n 96) \"yes\"\n 97) \"appendonly\"\n 98) \"no\"\n 99) \"dir\"\n100) \"/home/lxg/redis/redis-2.8.17/src\"\n101) \"maxmemory-policy\"\n102) \"volatile-lru\"\n103) \"appendfsync\"\n104) \"everysec\"\n105) \"save\"\n106) \"3600 1 300 100 60 10000\"\n107) \"loglevel\"\n108) \"notice\"\n109) \"client-output-buffer-limit\"\n110) \"normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60\"\n111) \"unixsocketperm\"\n112) \"0\"\n113) \"slaveof\"\n114) \"\"\n115) \"notify-keyspace-events\"\n116) \"\"\n117) \"bind\"\n118) \"\"\n```\n```shell\nredis.conf 配置项说明如下：\n1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程\n    daemonize no\n2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\n    pidfile /var/run/redis.pid\n3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字\n    port 6379\n4. 绑定的主机地址\n    bind 127.0.0.1\n5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能\n    timeout 300\n6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose\n    loglevel verbose\n7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null\n    logfile stdout\n8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id\n    databases 16\n9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n    save <seconds> <changes>\n    Redis默认配置文件中提供了三个条件：\n    save 900 1\n    save 300 10\n    save 60 10000\n    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。\n \n10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大\n    rdbcompression yes\n11. 指定本地数据库文件名，默认值为dump.rdb\n    dbfilename dump.rdb\n12. 指定本地数据库存放目录\n    dir ./\n13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步\n    slaveof <masterip> <masterport>\n14. 当master服务设置了密码保护时，slav服务连接master的密码\n    masterauth <master-password>\n15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭\n    requirepass foobared\n16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息\n    maxclients 128\n17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区\n    maxmemory <bytes>\n18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no\n    appendonly no\n19. 指定更新日志文件名，默认为appendonly.aof\n     appendfilename appendonly.aof\n20. 指定更新日志条件，共有3个可选值： \n    no：表示等操作系统进行数据缓存同步到磁盘（快） \n    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） \n    everysec：表示每秒同步一次（折衷，默认值）\n    appendfsync everysec\n \n21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）\n     vm-enabled no\n22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享\n     vm-swap-file /tmp/redis.swap\n23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0\n     vm-max-memory 0\n24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值\n     vm-page-size 32\n25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。\n     vm-pages 134217728\n26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4\n     vm-max-threads 4\n27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启\n    glueoutputbuf yes\n28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法\n    hash-max-zipmap-entries 64\n    hash-max-zipmap-value 512\n29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）\n    activerehashing yes\n30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件\n    include /path/to/local.conf\n\n参数说明\n```\n\n可以通过修改redis.conf文件或者使用config set 命令来修改配置\n```shell\n127.0.0.1:6379> config set loglevel \'notice\'\nOK\n```\n如何停止/启动/重启redis服务\n\n\n如果是用apt-get或者yum install安装的redis，可以直接通过下面的命令停止/启动/重启redis\n\n```shell\n/etc/init.d/redis-server stop\n/etc/init.d/redis-server start\n/etc/init.d/redis-server restart\n```\n如果是通过源码安装的redis，则可以通过redis的客户端程序redis-cli的shutdown命令来重启redis\n\n```shell\nredis-cli -h 127.0.0.1 -p 6379 shutdown\n```\n如果上述方式都没有成功停止redis，则可以使用终极武器 kill -9', 'md');
INSERT INTO `t_blog` VALUES ('35', '【Eclipse】导入别人的工程，发现报错Target runtime com.genuitec.runtime.generic.jee50 is not defined', '```\nTarget runtime com.genuitec.runtime.generic.jee50 is not defined\n\n导入别人的工程，发现报错Target runtime com.genuitec.runtime.generic.jee50 is not defined\n \n\n解决方法：', '2018-07-06 11:16:37', '4', '0', '<pre><code>Target runtime com.genuitec.runtime.generic.jee50 is not defined\n\n导入别人的工程，发现报错Target runtime com.genuitec.runtime.generic.jee50 is not defined\n\n\n解决方法：\n1. 找到工程目录的.settings\n2. 找到org.eclisep.wst.common.project.facet.core.xml文件\n3. 打开该文件，会发现&lt;runtime name=\"com.genuitec.runtime.generic.jee60\" /&gt;，把这句话去掉\n4. 刷新工程就行了\n</code></pre>', '17', 'Eclipse', '```\nTarget runtime com.genuitec.runtime.generic.jee50 is not defined\n\n导入别人的工程，发现报错Target runtime com.genuitec.runtime.generic.jee50 is not defined\n \n\n解决方法：\n1. 找到工程目录的.settings\n2. 找到org.eclisep.wst.common.project.facet.core.xml文件\n3. 打开该文件，会发现<runtime name=\"com.genuitec.runtime.generic.jee60\" />，把这句话去掉\n4. 刷新工程就行了\n```', 'md');
INSERT INTO `t_blog` VALUES ('36', '【Mysql】Mac操作系统下MySQL密码忘记后重置密码的方法，找回密码。', '1.苹果->系统偏好设置->最下边点mysql 在弹出页面中 关闭mysql服务（点击stop mysql server）\n\n2.进入目录\n\n```\ncd /usr/local/mysql/bin \n```\n3.获取权限。此时需要mac系统的密码，就是所谓的获取超级管理员权限。\n```\nsudo su \n``', '2018-07-06 11:20:24', '3', '0', '<p>1.苹果-&gt;系统偏好设置-&gt;最下边点mysql 在弹出页面中 关闭mysql服务（点击stop mysql server）</p>\n<p>2.进入目录</p>\n<pre><code>cd /usr/local/mysql/bin\n</code></pre><p>3.获取权限。此时需要mac系统的密码，就是所谓的获取超级管理员权限。</p>\n<pre><code>sudo su\n</code></pre><p>4.重启服务器</p>\n<pre><code>./mysqld_safe --skip-grant-tables &amp;\n</code></pre><p>回车后mysql会自动重启（偏好设置中mysql的状态会变成running）</p>\n<p>5.重开个终端，重启一下mysql服务，然后直接进入mysql</p>\n<pre><code>// 重启mysql\nsudo /usr/local/mysql/support-files/mysql.server restart\n// 进入mysql\n./mysql\n// 执行以下命令，刷新，然后设置新的密码。最后用户名为root，密码就是你自己设置的。\nFLUSH PRIVILEGES; \nSET PASSWORD FOR \'root\'@\'localhost\' = PASSWORD(\'你的新密码\');\n</code></pre>', '2', 'Mysql', '1.苹果->系统偏好设置->最下边点mysql 在弹出页面中 关闭mysql服务（点击stop mysql server）\n\n2.进入目录\n\n```\ncd /usr/local/mysql/bin \n```\n3.获取权限。此时需要mac系统的密码，就是所谓的获取超级管理员权限。\n```\nsudo su \n```\n4.重启服务器\n\n```\n./mysqld_safe --skip-grant-tables & \n```\n回车后mysql会自动重启（偏好设置中mysql的状态会变成running）\n\n5.重开个终端，重启一下mysql服务，然后直接进入mysql\n\n```\n// 重启mysql\nsudo /usr/local/mysql/support-files/mysql.server restart\n// 进入mysql\n./mysql\n// 执行以下命令，刷新，然后设置新的密码。最后用户名为root，密码就是你自己设置的。\nFLUSH PRIVILEGES; \nSET PASSWORD FOR \'root\'@\'localhost\' = PASSWORD(\'你的新密码\');\n```', 'md');
INSERT INTO `t_blog` VALUES ('38', '【Oracle】Mybatis操作Oracle常见错误以及解决方案', '##### ORA-00906 missing left parenthesis括号\n	Oracle 建表报错：ORA-00906 missing left parenthesis括号\n    建表语句：create table test(id char,name varchar(1),sex varchar', '2018-07-09 15:47:44', '9', '0', '<h5 id=\"h5-ora-00906-missing-left-parenthesis-\"><a name=\"ORA-00906 missing left parenthesis括号\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>ORA-00906 missing left parenthesis括号</h5><pre><code>Oracle 建表报错：ORA-00906 missing left parenthesis括号\n建表语句：create table test(id char,name varchar(1),sex varchar2);\n记着：varchar和varchar2  必须指定长度，不然会报错\n</code></pre><pre><code class=\"lang-shell\">mybatis中bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: ORA-00911: 无效字符\n    解决方案： 在mybatis中sql结尾处是否多了一个\" ; \" ，如果是去掉就可以了。\n    或者是否缺少了映射jdbcType。。如果为空时。如：\n    &lt;result property=\"format\" column=\"FORMAT\" jdbcType=\"INTEGER\" /&gt;\n</code></pre>\n', '19', 'Oracle', '##### ORA-00906 missing left parenthesis括号\n	Oracle 建表报错：ORA-00906 missing left parenthesis括号\n    建表语句：create table test(id char,name varchar(1),sex varchar2);\n    记着：varchar和varchar2  必须指定长度，不然会报错\n```shell\nmybatis中bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: ORA-00911: 无效字符\n	解决方案： 在mybatis中sql结尾处是否多了一个\" ; \" ，如果是去掉就可以了。\n	或者是否缺少了映射jdbcType。。如果为空时。如：\n	<result property=\"format\" column=\"FORMAT\" jdbcType=\"INTEGER\" /> \n```\n', 'md');
INSERT INTO `t_blog` VALUES ('41', '【Linux】CentOS下的DNS永久性更改', '###### 网上很多讲的dns的永久性添加其实都是暂时性添加，重启网卡后就会丢失。代码如下：\n```shell\necho nameserver 8.8.8.8 > /etc/resolv.conf\n```\n很明显，这个并不符合大家的要求。\n\n###### II.下面是永久性修改的教程：\n1、运行命令：\n `', '2018-07-10 10:03:14', '3', '0', '<h6 id=\"h6--dns-\"><a name=\"网上很多讲的dns的永久性添加其实都是暂时性添加，重启网卡后就会丢失。代码如下：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>网上很多讲的dns的永久性添加其实都是暂时性添加，重启网卡后就会丢失。代码如下：</h6><pre><code class=\"lang-shell\">echo nameserver 8.8.8.8 &gt; /etc/resolv.conf\n</code></pre>\n<p>很明显，这个并不符合大家的要求。</p>\n<h6 id=\"h6-ii-\"><a name=\"II.下面是永久性修改的教程：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>II.下面是永久性修改的教程：</h6><p>1、运行命令：</p>\n<pre><code class=\"lang-shell\"> cd /etc/sysconfig/network-scripts/\n ls\n</code></pre>\n<p>2、找到该目录下的网卡配置文件如:ifcfg-ens32，在其中添加三行，如果文件中已经有了DNS,就先删除再添加：</p>\n<pre><code> PEERD=no \n DNS1=8.8.8.8 \n DNS2=114.144.114.114```shell\n PEERD=no \n DNS1=8.8.8.8 \n DNS2=114.144.114.114\n</code></pre><p>3、添加完之后运行命令：</p>\n<h1 id=\"h1--\"><a name=\"重启网络服务，使更改生效\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>重启网络服务，使更改生效</h1><pre><code class=\"lang-shell\"> service network restart\n</code></pre>\n<p>III.最后使用脚本添加而非修改文件，进一步提高便捷度：</p>\n<h5 id=\"h5--dns1-dns-ip-dns2-dns-ip-\"><a name=\"为网卡名称,dns1为主dns的IP地址，dns2为次DNS的ip地址\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>为网卡名称,dns1为主dns的IP地址，dns2为次DNS的ip地址</h5><pre><code class=\"lang-shell\">nmcli con mod * ipv4.dns \"dns1 dns2\"\nservice network restart\n</code></pre>\n<p>这样放到脚本里或者直接命令行执行就可以实现DNS的自动永久性配置，无需手动修改配置文件，配置完成后可查看网卡配置文件是否改变，若未改变，重启即可。</p>\n', '16', 'Linux', '###### 网上很多讲的dns的永久性添加其实都是暂时性添加，重启网卡后就会丢失。代码如下：\n```shell\necho nameserver 8.8.8.8 > /etc/resolv.conf\n```\n很明显，这个并不符合大家的要求。\n\n###### II.下面是永久性修改的教程：\n1、运行命令：\n ```shell\n cd /etc/sysconfig/network-scripts/\n ls\n```\n2、找到该目录下的网卡配置文件如:ifcfg-ens32，在其中添加三行，如果文件中已经有了DNS,就先删除再添加：\n```\n PEERD=no \n DNS1=8.8.8.8 \n DNS2=114.144.114.114```shell\n PEERD=no \n DNS1=8.8.8.8 \n DNS2=114.144.114.114\n```\n3、添加完之后运行命令：\n\n #重启网络服务，使更改生效 \n```shell\n service network restart\n```\nIII.最后使用脚本添加而非修改文件，进一步提高便捷度：\n##### 为网卡名称,dns1为主dns的IP地址，dns2为次DNS的ip地址\n```shell\nnmcli con mod * ipv4.dns \"dns1 dns2\"\nservice network restart\n```\n这样放到脚本里或者直接命令行执行就可以实现DNS的自动永久性配置，无需手动修改配置文件，配置完成后可查看网卡配置文件是否改变，若未改变，重启即可。', 'md');
INSERT INTO `t_blog` VALUES ('42', '【Redis】Windows环境下Redis的安装详解。', '一、说明Windows环境下Redis的安装，首先要讲的是，Redis官方只支持Linux，还好 Microsoft Open Tech group 开发了windows版本的Redis，github地址： https://github.com/MicrosoftArchive/redis ，已经发布了很多个', '2018-07-10 10:20:08', '4', '0', '<p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">一、说明</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">Windows环境下Redis的安装，首先要讲的是，Redis官方只支持Linux，还好 Microsoft Open Tech group 开发了windows版本的Redis，github地址：&nbsp;<a href=\"https://github.com/MicrosoftArchive/redis\" target=\"_blank\" style=\"color: rgb(86, 182, 233);\">https://github.com/MicrosoftArchive/redis</a>&nbsp;，已经发布了很多个release版本，截至目前已经发布到了 v-3.2.100 。</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">&nbsp;官网截图：</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/emd_blog/static/userImages/20180710/1531190105472015275.png\" title=\"1531190105472015275.png\" alt=\"鍥剧墖.png\"/></p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">github截图：</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/emd_blog/static/userImages/20180710/1531190134589077142.png\" title=\"1531190134589077142.png\" alt=\"鍥剧墖.png\"/><br/></p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">二、下载与安装</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">&nbsp;最新版本是3.2.100 ，这里就使用这个版本来进行安装，下载&nbsp;Redis-x64-3.2.100.msi ，双击开始安装：</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/emd_blog/static/userImages/20180710/1531190154512020433.png\" title=\"1531190154512020433.png\" alt=\"鍥剧墖.png\"/></p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/emd_blog/static/userImages/20180710/1531190163979036248.png\" title=\"1531190163979036248.png\" alt=\"鍥剧墖.png\"/></p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/emd_blog/static/userImages/20180710/1531190174273078309.png\" title=\"1531190174273078309.png\" alt=\"鍥剧墖.png\"/></p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/emd_blog/static/userImages/20180710/1531190183221059936.png\" title=\"1531190183221059936.png\" alt=\"鍥剧墖.png\"/><br/></p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">安装完毕，我们看一下目录文件：</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/emd_blog/static/userImages/20180710/1531190210967045292.png\" title=\"1531190210967045292.png\" alt=\"鍥剧墖.png\"/></p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/ueditor/jsp/upload/image/20180710/1531189133595066735.png\" alt=\"\" style=\"border: 0px; max-width: 900px;\"/></p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">三、Redis 启动</p><pre class=\"brush:bash;toolbar:false;\">redis-server&nbsp;&nbsp;redis.windows.conf</pre><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">&nbsp;四、redis-cli 的使用</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\">&nbsp;双击打开 redis-cli.exe，我们可以在命令行使用redis命令来进行操作：</p><p style=\"margin: 10px auto; text-indent: 0px; color: rgb(35, 35, 35); font-family: Verdana, Arial, helvetica, sans-seriff; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: start; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial;\"><img src=\"/emd_blog/static/userImages/20180710/1531190237602054329.png\" title=\"1531190237602054329.png\" alt=\"鍥剧墖.png\"/><br/></p>', '18', 'Redis', '一、说明Windows环境下Redis的安装，首先要讲的是，Redis官方只支持Linux，还好 Microsoft Open Tech group 开发了windows版本的Redis，github地址： https://github.com/MicrosoftArchive/redis ，已经发布了很多个release版本，截至目前已经发布到了 v-3.2.100 。 官网截图：github截图：二、下载与安装 最新版本是3.2.100 ，这里就使用这个版本来进行安装，下载 Redis-x64-3.2.100.msi ，双击开始安装：安装完毕，我们看一下目录文件：三、Redis 启动redis-server  redis.windows.conf 四、redis-cli 的使用 双击打开 redis-cli.exe，我们可以在命令行使用redis命令来进行操作：', 'ue');
INSERT INTO `t_blog` VALUES ('44', '【Linux】Centos中yum安装时错误 Errno 14 Couldn\'t resolve host 解决办法', '###### 错误代码类似如下：\n```shell\nDownloading Packages:\nhttp://mirrors.163.com/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6', '2018-07-11 14:58:34', '7', '0', '<h6 id=\"h6--\"><a name=\"错误代码类似如下：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>错误代码类似如下：</h6><pre><code class=\"lang-shell\">Downloading Packages:\nhttp://mirrors.163.com/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirrors.163.com\'\"Trying other mirror.\nhttp://mirrors.aliyun.com/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirrors.aliyun.com\'\"Trying other mirror.\nhttp://centos.ustc.edu.cn/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'centos.ustc.edu.cn\'\"Trying other mirror.\nhttp://mirrors.yun-idc.com/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirrors.yun-idc.com\'\"Trying other mirror.\nhttp://mirrors.neusoft.edu.cn/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirrors.neusoft.edu.cn\'\"Trying other mirror.\nhttp://mirror01.idc.hinet.net/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirror01.idc.hinet.net\'\"Trying other mirror.\nhttp://ftp.stust.edu.tw/pub/Linux/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'ftp.stust.edu.tw\'\"Trying other mirror.\nhttp://ftp.twaren.net/Linux/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'ftp.twaren.net\'\"Trying other mirror.\nhttp://ftp.isu.edu.tw/pub/Linux/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'ftp.isu.edu.tw\'\"Trying other mirror.\nhttp://ftp.stu.edu.tw/Linux/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'ftp.stu.edu.tw\'\"Trying other mirror.\n\nError Downloading Packages:\n  mlocate-0.22.2-4.el6.i686: failure: Packages/mlocate-0.22.2-4.el6.i686.rpm from base: [Errno 256] No more mirrors to try.\n</code></pre>\n<h4 id=\"h4--etc-resolv-conf-dns-\"><a name=\"解决方法：修改/etc/resolv.conf添加dns 然后重启网卡。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>解决方法：修改/etc/resolv.conf添加dns 然后重启网卡。</h4><p><img src=\"/emd_blog/static/userImages/markdownuploadimages/20180726wKioL1ZJclaBUc4rAACjkzFcZ0E261.jpg\" alt=\"\">\n', '16', 'linux', '###### 错误代码类似如下：\n```shell\nDownloading Packages:\nhttp://mirrors.163.com/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirrors.163.com\'\"Trying other mirror.\nhttp://mirrors.aliyun.com/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirrors.aliyun.com\'\"Trying other mirror.\nhttp://centos.ustc.edu.cn/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'centos.ustc.edu.cn\'\"Trying other mirror.\nhttp://mirrors.yun-idc.com/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirrors.yun-idc.com\'\"Trying other mirror.\nhttp://mirrors.neusoft.edu.cn/centos/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirrors.neusoft.edu.cn\'\"Trying other mirror.\nhttp://mirror01.idc.hinet.net/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'mirror01.idc.hinet.net\'\"Trying other mirror.\nhttp://ftp.stust.edu.tw/pub/Linux/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'ftp.stust.edu.tw\'\"Trying other mirror.\nhttp://ftp.twaren.net/Linux/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'ftp.twaren.net\'\"Trying other mirror.\nhttp://ftp.isu.edu.tw/pub/Linux/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'ftp.isu.edu.tw\'\"Trying other mirror.\nhttp://ftp.stu.edu.tw/Linux/CentOS/6.5/os/i386/Packages/mlocate-0.22.2-4.el6.i686.rpm: [Errno 14] PYCURL ERROR 6 - \"Couldn\'t resolve host \'ftp.stu.edu.tw\'\"Trying other mirror.\n\nError Downloading Packages:\n  mlocate-0.22.2-4.el6.i686: failure: Packages/mlocate-0.22.2-4.el6.i686.rpm from base: [Errno 256] No more mirrors to try.\n```\n\n#### 解决方法：修改/etc/resolv.conf添加dns 然后重启网卡。\n![](/emd_blog/static/userImages/markdownuploadimages/20180726wKioL1ZJclaBUc4rAACjkzFcZ0E261.jpg)', 'md');
INSERT INTO `t_blog` VALUES ('45', '【Linux】Centos镜像使用网易镜像教程。', '### CentOS镜像使用帮助\n####收录架构\ni386\nx86_64\nSRPMS\n#### 收录版本\n######所有版本\n\n#### 更新时间\n每4小时更新一次\n\n##### 使用说明\n\n```shell\n首先备份/etc/yum.repos.d/CentOS-Base.repo\n```\n\n```sh', '2018-07-11 15:26:01', '6', '0', '<h3 id=\"h3-centos-\"><a name=\"CentOS镜像使用帮助\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CentOS镜像使用帮助</h3><h4 id=\"h4-u6536u5F55u67B6u6784\"><a name=\"收录架构\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>收录架构</h4><p>i386<br>x86_64<br>SRPMS\n<h4 id=\"h4-u6536u5F55u7248u672C\"><a name=\"收录版本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>收录版本</h4><h6 id=\"h6-u6240u6709u7248u672C\"><a name=\"所有版本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>所有版本</h6><h4 id=\"h4-u66F4u65B0u65F6u95F4\"><a name=\"更新时间\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>更新时间</h4><p>每4小时更新一次</p>\n<h5 id=\"h5-u4F7Fu7528u8BF4u660E\"><a name=\"使用说明\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>使用说明</h5><pre><code class=\"lang-shell\">首先备份/etc/yum.repos.d/CentOS-Base.repo\n</code></pre>\n<pre><code class=\"lang-shell\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n</code></pre>\n<p>下载对应版本repo文件, 放入/etc/yum.repos.d/(操作前请做好相应备份)</p>\n<p><a href=\"http://mirrors.163.com/.help/CentOS7-Base-163.repo\">Centos7</a><br><a href=\"http://mirrors.163.com/.help/CentOS6-Base-163.repo\">Centos6</a><br><a href=\"http://mirrors.163.com/.help/CentOS5-Base-163.repo\">Centos5</a><br>运行以下命令生成缓存\n<pre><code class=\"lang-shell\">yum clean all\nyum makecache\n</code></pre>\n', '16', 'Linux', '### CentOS镜像使用帮助\n####收录架构\ni386\nx86_64\nSRPMS\n#### 收录版本\n######所有版本\n\n#### 更新时间\n每4小时更新一次\n\n##### 使用说明\n\n```shell\n首先备份/etc/yum.repos.d/CentOS-Base.repo\n```\n\n```shell\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n下载对应版本repo文件, 放入/etc/yum.repos.d/(操作前请做好相应备份)\n\n[Centos7](http://mirrors.163.com/.help/CentOS7-Base-163.repo)\n[Centos6](http://mirrors.163.com/.help/CentOS6-Base-163.repo)\n[Centos5](http://mirrors.163.com/.help/CentOS5-Base-163.repo)\n运行以下命令生成缓存\n\n```shell\nyum clean all\nyum makecache\n```', 'md');
INSERT INTO `t_blog` VALUES ('46', '【Docker】Docker入门之Centos(Linux)下安装docker，并运行hello-world', '#####【Docker】Docker入门之Centos(Linux)下安装docker，并运行hello-world\n###### 首先使用Centos的yum命令，安装docker：\n```shell\n yum install docker\n```\n###### 然后安装完成之后，可以使用docker或者', '2018-07-11 16:44:07', '5', '0', '<h5 id=\"h5--docker-docker-centos-linux-docker-hello-world\"><a name=\"【Docker】Docker入门之Centos(Linux)下安装docker，并运行hello-world\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>【Docker】Docker入门之Centos(Linux)下安装docker，并运行hello-world</h5><h6 id=\"h6--centos-yum-docker-\"><a name=\"首先使用Centos的yum命令，安装docker：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>首先使用Centos的yum命令，安装docker：</h6><pre><code class=\"lang-shell\"> yum install docker\n</code></pre>\n<h6 id=\"h6--docker-docker-version-\"><a name=\"然后安装完成之后，可以使用docker或者docker version命令查看\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>然后安装完成之后，可以使用docker或者docker version命令查看</h6><pre><code class=\"lang-shell\">docker或者docker version\n</code></pre>\n<h6 id=\"h6--docker-service-docker-start\"><a name=\"启动docker命令service docker start\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动docker命令service docker start</h6><pre><code class=\"lang-shell\">service docker start\n</code></pre>\n<pre><code class=\"lang-shell\">[root@localhost local]# service docker start\nRedirecting to /bin/systemctl start docker.service\n</code></pre>\n<h6 id=\"h6--hello-world-\"><a name=\"然后可以拉取Hello-world镜像：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>然后可以拉取Hello-world镜像：</h6><pre><code class=\"lang-shell\">docker pull hello-world\n</code></pre>\n<pre><code class=\"lang-shell\">[root@localhost local]# docker pull hello-world\nUsing default tag: latest\nTrying to pull repository docker.io/library/hello-world ... \nlatest: Pulling from docker.io/library/hello-world\n9db2ca6ccae0: Pull complete \nDigest: sha256:569d44f69ebf4592ec3a63cbea6d9c7b6cccfd50890794fa169455179b399eb4\nStatus: Downloaded newer image for docker.io/hello-world:latest\n</code></pre>\n<h6 id=\"h6--hello-world-\"><a name=\"最后可以运行Hello-world镜像：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>最后可以运行Hello-world镜像：</h6><pre><code class=\"lang-shell\">[root@localhost local]# docker run hello-world\n</code></pre>\n<pre><code class=\"lang-shell\">Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/\n</code></pre>\n', '25', 'Docker', '#####【Docker】Docker入门之Centos(Linux)下安装docker，并运行hello-world\n###### 首先使用Centos的yum命令，安装docker：\n```shell\n yum install docker\n```\n###### 然后安装完成之后，可以使用docker或者docker version命令查看\n```shell\ndocker或者docker version\n```\n###### 启动docker命令service docker start\n```shell\nservice docker start\n```\n```shell\n[root@localhost local]# service docker start\nRedirecting to /bin/systemctl start docker.service\n```\n###### 然后可以拉取Hello-world镜像：\n```shell\ndocker pull hello-world\n```\n```shell\n[root@localhost local]# docker pull hello-world\nUsing default tag: latest\nTrying to pull repository docker.io/library/hello-world ... \nlatest: Pulling from docker.io/library/hello-world\n9db2ca6ccae0: Pull complete \nDigest: sha256:569d44f69ebf4592ec3a63cbea6d9c7b6cccfd50890794fa169455179b399eb4\nStatus: Downloaded newer image for docker.io/hello-world:latest\n```\n###### 最后可以运行Hello-world镜像：\n```shell\n[root@localhost local]# docker run hello-world\n```\n```shell\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/\n\n```', 'md');
INSERT INTO `t_blog` VALUES ('47', '【地址导航】程序员常用工具地址链接整理', '#### [github](https://github.com/QQ986945193)\n------------\n#### [必应bing](http://cn.bing.com/)\n------------\n#### [github](https://github.com/QQ986945193)\n--', '2018-07-16 10:33:36', '5', '0', '<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4--bing\"><a name=\"必应bing\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"http://cn.bing.com/\">必应bing</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-google\"><a name=\"google\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://www.google.com.hk/\">google</a></h4><hr>\n<h4 id=\"h4-tomcat\"><a name=\"tomcat\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"http://tomcat.apache.org\">tomcat</a></h4><hr>\n<h4 id=\"h4-u6E90u7801u4E4Bu5BB6\"><a name=\"源码之家\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"http://www.mycodes.net\">源码之家</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n<h4 id=\"h4-github\"><a name=\"github\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><a href=\"https://github.com/QQ986945193\">github</a></h4><hr>\n', '4', 'IT之路', '#### [github](https://github.com/QQ986945193)\n------------\n#### [必应bing](http://cn.bing.com/)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [google](https://www.google.com.hk/)\n------------\n#### [tomcat](http://tomcat.apache.org)\n------------\n#### [源码之家](http://www.mycodes.net)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------\n#### [github](https://github.com/QQ986945193)\n------------', 'md');
INSERT INTO `t_blog` VALUES ('48', '【Linux】Centos7 关闭防火墙方法详解', '## Centos7 关闭防火墙\n\nCentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下\n\n1、直接关闭防火墙\n\n```shell\nsystemctl stop firewalld.service #停止firewall\n\nsystemctl disable fir', '2018-07-19 09:56:37', '4', '0', '<h2 id=\"h2-centos7-\"><a name=\"Centos7 关闭防火墙\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Centos7 关闭防火墙</h2><p>CentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下</p>\n<p>1、直接关闭防火墙</p>\n<pre><code class=\"lang-shell\">systemctl stop firewalld.service #停止firewall\n\nsystemctl disable firewalld.service #禁止firewall开机启动\n</code></pre>\n<p>2、设置 iptables service（后面是安装iptables，若本地没有可省略)</p>\n<pre><code class=\"lang-shell\">yum -y install iptables-services\n</code></pre>\n<p>如果要修改防火墙配置，如增加防火墙端口3306</p>\n<pre><code class=\"lang-shell\">vi /etc/sysconfig/iptables\n</code></pre>\n<p>增加规则</p>\n<pre><code class=\"lang-shell\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n</code></pre>\n<p>保存退出后</p>\n<pre><code class=\"lang-shell\">systemctl restart iptables.service #重启防火墙使配置生效\n\nsystemctl enable iptables.service #设置防火墙开机启动\n</code></pre>\n<p>最后重启系统使设置生效即可。</p>\n<p>其他系统关闭防火墙即可。</p>\n<pre><code class=\"lang-shell\">service iptables stop\n</code></pre>\n', '16', 'Linux', '## Centos7 关闭防火墙\n\nCentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下\n\n1、直接关闭防火墙\n\n```shell\nsystemctl stop firewalld.service #停止firewall\n\nsystemctl disable firewalld.service #禁止firewall开机启动\n```\n\n2、设置 iptables service（后面是安装iptables，若本地没有可省略)\n\n```shell\nyum -y install iptables-services\n```\n\n如果要修改防火墙配置，如增加防火墙端口3306\n\n```shell\nvi /etc/sysconfig/iptables\n```\n\n增加规则\n\n```shell\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n\n保存退出后\n\n```shell\nsystemctl restart iptables.service #重启防火墙使配置生效\n\nsystemctl enable iptables.service #设置防火墙开机启动\n\n```\n\n\n最后重启系统使设置生效即可。\n\n其他系统关闭防火墙即可。\n```shell\nservice iptables stop\n```', 'md');
INSERT INTO `t_blog` VALUES ('49', '【Linux】在Centos上用yum安装docker，使用国内清华大学镜像源', '### 1.设置yum镜像\n国外的镜像安装速度很慢，采用清华大学 TUNA 镜像源。\n用root用户新建 /etc/yum.repos.d/docker.repo 文件，内容如下：\n```shell\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://mir', '2018-07-19 10:55:02', '5', '0', '<h3 id=\"h3-1-yum-\"><a name=\"1.设置yum镜像\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.设置yum镜像</h3><p>国外的镜像安装速度很慢，采用清华大学 TUNA 镜像源。<br>用root用户新建 /etc/yum.repos.d/docker.repo 文件，内容如下：\n<pre><code class=\"lang-shell\">[dockerrepo]\nname=Docker Repository\nbaseurl=https://mirrors.tuna.tsinghua.edu.cn/docker/yum/repo/centos7\nenabled=1\ngpgcheck=1\ngpgkey=https://mirrors.tuna.tsinghua.edu.cn/docker/yum/gpg\n</code></pre>\n<h3 id=\"h3-2-\"><a name=\"2.安装执行命令：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.安装执行命令：</h3><pre><code class=\"lang-shell\">sudo yum makecache\nsudo yum install docker-engine\n</code></pre>\n<h3 id=\"h3-3-docker-\"><a name=\"3.启动docker服务执行命令：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.启动docker服务执行命令：</h3><pre><code class=\"lang-shell\">systemctl start docker.service\n</code></pre>\n<h3 id=\"h3-4-docker-\"><a name=\"4.测试docker服务执行命令：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.测试docker服务执行命令：</h3><pre><code class=\"lang-shell\">[root@localhost local]# docker pull hello-world\nUsing default tag: latest\nTrying to pull repository docker.io/library/hello-world ... \nlatest: Pulling from docker.io/library/hello-world\n9db2ca6ccae0: Pull complete \nDigest: sha256:569d44f69ebf4592ec3a63cbea6d9c7b6cccfd50890794fa169455179b399eb4\nStatus: Downloaded newer image for docker.io/hello-world:latest\n[root@localhost local]# docker run hello-world\n</code></pre>\n<p>屏幕上如果输出以下类似信息，说明docker安装正常。</p>\n<pre><code class=\"lang-shell\">Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/\n</code></pre>\n<h3 id=\"h3-5-docker-compose-\"><a name=\"5.安装docker-compose执行命令：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5.安装docker-compose执行命令：</h3><pre><code class=\"lang-shell\">sudo curl -L https://github.com/docker/compose/releases/download/1.8.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose\n</code></pre>\n<pre><code class=\"lang-shell\">chmod +x /usr/local/bin/docker-compose\n</code></pre>\n', '25', 'Docker', '### 1.设置yum镜像\n国外的镜像安装速度很慢，采用清华大学 TUNA 镜像源。\n用root用户新建 /etc/yum.repos.d/docker.repo 文件，内容如下：\n```shell\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://mirrors.tuna.tsinghua.edu.cn/docker/yum/repo/centos7\nenabled=1\ngpgcheck=1\ngpgkey=https://mirrors.tuna.tsinghua.edu.cn/docker/yum/gpg\n```\n\n### 2.安装执行命令：\n\n```shell\nsudo yum makecache\nsudo yum install docker-engine\n```\n### 3.启动docker服务执行命令：\n```shell\nsystemctl start docker.service\n```\n### 4.测试docker服务执行命令：\n```shell\n[root@localhost local]# docker pull hello-world\nUsing default tag: latest\nTrying to pull repository docker.io/library/hello-world ... \nlatest: Pulling from docker.io/library/hello-world\n9db2ca6ccae0: Pull complete \nDigest: sha256:569d44f69ebf4592ec3a63cbea6d9c7b6cccfd50890794fa169455179b399eb4\nStatus: Downloaded newer image for docker.io/hello-world:latest\n[root@localhost local]# docker run hello-world\n```\n屏幕上如果输出以下类似信息，说明docker安装正常。\n```shell\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/\n```\n### 5.安装docker-compose执行命令：\n```shell\nsudo curl -L https://github.com/docker/compose/releases/download/1.8.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n```\n```shell\nchmod +x /usr/local/bin/docker-compose\n```', 'md');
INSERT INTO `t_blog` VALUES ('50', '【Docker】docker常用命令总结大全', '\n##### docker命令的具体使用参数帮助\n```shell\ndocker 命令 --help\n```\n##### 查看当前正在运行的容器\n```shell\n docker ps\n```\n##### 查看所有容器的状态\n```shell\ndocker ps -a\n```\n##### 启动/停止某个容器\n', '2018-07-19 11:02:45', '3', '0', '<h5 id=\"h5-docker-\"><a name=\"docker命令的具体使用参数帮助\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>docker命令的具体使用参数帮助</h5><pre><code class=\"lang-shell\">docker 命令 --help\n</code></pre>\n<h5 id=\"h5-u67E5u770Bu5F53u524Du6B63u5728u8FD0u884Cu7684u5BB9u5668\"><a name=\"查看当前正在运行的容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看当前正在运行的容器</h5><pre><code class=\"lang-shell\"> docker ps\n</code></pre>\n<h5 id=\"h5-u67E5u770Bu6240u6709u5BB9u5668u7684u72B6u6001\"><a name=\"查看所有容器的状态\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看所有容器的状态</h5><pre><code class=\"lang-shell\">docker ps -a\n</code></pre>\n<h5 id=\"h5--\"><a name=\"启动/停止某个容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动/停止某个容器</h5><pre><code class=\"lang-shell\"> docker start/stop id/name\n</code></pre>\n<h5 id=\"h5--exit-\"><a name=\"进入某个容器(使用exit退出后容器也跟着停止运行)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>进入某个容器(使用exit退出后容器也跟着停止运行)</h5><pre><code class=\"lang-shell\"> docker attach id\n</code></pre>\n<h5 id=\"h5--exit-\"><a name=\"启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）</h5><pre><code class=\"lang-shell\">docker exec -ti id\n</code></pre>\n<h5 id=\"h5-u67E5u770Bu672Cu5730u955Cu50CF\"><a name=\"查看本地镜像\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看本地镜像</h5><pre><code class=\"lang-shell\"> docker images\n</code></pre>\n<h5 id=\"h5-u5220u9664u67D0u4E2Au5BB9u5668\"><a name=\"删除某个容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>删除某个容器</h5><pre><code class=\"lang-shell\"> docker rm id/name\n</code></pre>\n<h5 id=\"h5-u5220u9664u67D0u4E2Au955Cu50CF\"><a name=\"删除某个镜像\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>删除某个镜像</h5><h6 id=\"h6--f-\"><a name=\"有时候删除会失败，比如：有一个容器正在使用该镜像文件。这时可以加参数-f 强制删除\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>有时候删除会失败，比如：有一个容器正在使用该镜像文件。这时可以加参数-f 强制删除</h6><pre><code class=\"lang-shell\">docker rmi id/name\n</code></pre>\n<h5 id=\"h5--ubuntu-test-bash\"><a name=\"复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash</h5><pre><code class=\"lang-shell\">docker run --name test -ti ubuntu /bin/bash\n</code></pre>\n<h5 id=\"h5-u67E5u770Bu6700u8FD1u8FD0u884Cu8FC7u7684u6240u6709u5BB9u5668\"><a name=\"查看最近运行过的所有容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看最近运行过的所有容器</h5><pre><code class=\"lang-shell\">docker ps -a\n</code></pre>\n', '25', 'docker', '\n##### docker命令的具体使用参数帮助\n```shell\ndocker 命令 --help\n```\n##### 查看当前正在运行的容器\n```shell\n docker ps\n```\n##### 查看所有容器的状态\n```shell\ndocker ps -a\n```\n##### 启动/停止某个容器\n```shell\n docker start/stop id/name\n```\n##### 进入某个容器(使用exit退出后容器也跟着停止运行)\n```shell\n docker attach id\n```\n##### 启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）\n ```shell\ndocker exec -ti id\n```\n##### 查看本地镜像\n```shell\n docker images\n```\n##### 删除某个容器\n```shell\n docker rm id/name\n```\n##### 删除某个镜像\n###### 有时候删除会失败，比如：有一个容器正在使用该镜像文件。这时可以加参数-f 强制删除\n```shell\ndocker rmi id/name\n```\n##### 复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash\n```shell\ndocker run --name test -ti ubuntu /bin/bash\n```\n##### 查看最近运行过的所有容器\n```shell\ndocker ps -a\n```\n', 'md');
INSERT INTO `t_blog` VALUES ('51', '【Docker】docker操作中常见错误，以及解决方法', '```shell\nError response from daemon: Conflict. The name \"zookeeper\" is already in use by container d1c261ad0b1e. You have to remove (or rename) that contai', '2018-07-20 11:09:32', '10', '2', '<pre><code class=\"lang-shell\">Error response from daemon: Conflict. The name \"zookeeper\" is already in use by container d1c261ad0b1e. You have to remove (or rename) that container to be able to reuse that name.\n</code></pre>\n<h5 id=\"h5--\"><a name=\"上面这种错误是提示容器名称已经重复了，需要更换名字或者删除以前的容器。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>上面这种错误是提示容器名称已经重复了，需要更换名字或者删除以前的容器。</h5><h5 id=\"h5-u67E5u770Bu6700u8FD1u8FD0u884Cu8FC7u7684u6240u6709u5BB9u5668\"><a name=\"查看最近运行过的所有容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看最近运行过的所有容器</h5><pre><code class=\"lang-shell\">docker ps -a\n</code></pre>\n<h5 id=\"h5-u5220u9664u67D0u4E2Au5BB9u5668\"><a name=\"删除某个容器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>删除某个容器</h5><pre><code class=\"lang-shell\"> docker rm id/name\n</code></pre>\n<hr>\n', '25', 'Docker', '```shell\nError response from daemon: Conflict. The name \"zookeeper\" is already in use by container d1c261ad0b1e. You have to remove (or rename) that container to be able to reuse that name.\n```\n##### 上面这种错误是提示容器名称已经重复了，需要更换名字或者删除以前的容器。\n##### 查看最近运行过的所有容器\n```shell\ndocker ps -a\n```\n##### 删除某个容器\n```shell\n docker rm id/name\n```\n\n------------\n\n', 'md');
INSERT INTO `t_blog` VALUES ('52', '【Docker】Docker安装Zookeeper并进行操作管理', '##### 下载Zookeeper镜像\n```shell\ndocker pull zookeeper\n```\n\n##### 启动容器并添加映射\n```shell\ndocker run --privileged=true -d --name zookeeper --publish 2181:2181  -d z', '2018-09-22 16:04:24', '2', '0', '<h5 id=\"h5--zookeeper-\"><a name=\"下载Zookeeper镜像\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载Zookeeper镜像</h5><pre><code class=\"lang-shell\">docker pull zookeeper\n</code></pre>\n<h5 id=\"h5-u542Fu52A8u5BB9u5668u5E76u6DFBu52A0u6620u5C04\"><a name=\"启动容器并添加映射\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动容器并添加映射</h5><pre><code class=\"lang-shell\">docker run --privileged=true -d --name zookeeper --publish 2181:2181  -d zookeeper:latest\n</code></pre>\n<h5 id=\"h5-u67E5u770Bu5BB9u5668u662Fu5426u542Fu52A8\"><a name=\"查看容器是否启动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查看容器是否启动</h5><pre><code class=\"lang-shell\">docker ps\n</code></pre>\n<p><img src=\"/emd_blog/static/userImages/markdownuploadimages/20180922docker_zookeeper.png\" alt=\"\">\n<hr>\n', '25', 'docker zookeeper', '##### 下载Zookeeper镜像\n```shell\ndocker pull zookeeper\n```\n\n##### 启动容器并添加映射\n```shell\ndocker run --privileged=true -d --name zookeeper --publish 2181:2181  -d zookeeper:latest\n```\n\n##### 查看容器是否启动\n```shell\ndocker ps\n```\n![](/emd_blog/static/userImages/markdownuploadimages/20180922docker_zookeeper.png)\n\n\n---------------------\n\n', 'md');
INSERT INTO `t_blog` VALUES ('53', '【Docker】Docker下安装使用Oracle XE', '##### 【Docker】Docker下安装使用Oracle\n###### 下载官网镜像\n```shell\n[root@localhost mysql]# docker pull wnameless/oracle-xe-11g\n\nUsing default tag: latest\nlatest: Pulli', '2018-09-22 16:15:51', '4', '0', '<h5 id=\"h5--docker-docker-oracle\"><a name=\"【Docker】Docker下安装使用Oracle\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>【Docker】Docker下安装使用Oracle</h5><h6 id=\"h6-u4E0Bu8F7Du5B98u7F51u955Cu50CF\"><a name=\"下载官网镜像\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下载官网镜像</h6><pre><code class=\"lang-shell\">[root@localhost mysql]# docker pull wnameless/oracle-xe-11g\n\nUsing default tag: latest\nlatest: Pulling from wnameless/oracle-xe-11g\n9fb6c798fa41: Pull complete\n3b61febd4aef: Pull complete\n9d99b9777eb0: Pull complete\nd010c8cf75d7: Pull complete\n7fac07fb303e: Pull complete\n39848af56716: Pull complete\ncdddd1b7e86a: Pull complete\nDigest: sha256:63128f31cd7f4f01ba7af28c9e40cdb877ecdcf93b19273d56928ea19c09c6f6\nStatus: Downloaded newer image for wnameless/oracle-xe-11g:latest\n\n[root@localhost mysql]# docker images\n\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nwnameless/oracle-xe-11g   latest              f794779ccdb9        7 weeks ago         2.23GB\n</code></pre>\n<h6 id=\"h6-u8FD0u884Cu955Cu50CF\"><a name=\"运行镜像\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>运行镜像</h6><pre><code class=\"lang-shell\">[root@localhost mysql]# docker run -d -p 49160:22 -p 49161:1521 wnameless/oracle-xe-11g\n\n3267ef25afadf3e4ff6686a076d1caf00d0419f40509695ed1a5ca358483e65b\n\n[root@localhost mysql]# docker ps\n\nCONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                                                      NAMES\n3267ef25afad        wnameless/oracle-xe-11g   \"/bin/sh -c \'/usr/...\"   6 minutes ago       Up 6 minutes        8080/tcp, 0.0.0.0:49160-&gt;22/tcp, 0.0.0.0:49161-&gt;1521/tcp   quirky_wright\n</code></pre>\n<h6 id=\"h6-u76F8u5173u8BF4u660E\"><a name=\"相关说明\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>相关说明</h6><pre><code class=\"lang-shell\">hostname: localhost\nport: 49161\nsid: xe\nusername: system\npassword: oracle\nSYSTEM和SYS的初始密码都为 oracle\nContainer SSH 的 root 密码为admin\n</code></pre>\n<p>四 测试<br><img src=\"/emd_blog/static/userImages/markdownuploadimages/20180922ORACLE.png =200x300\" alt=\"\">\n', '25', 'docker oracle', '##### 【Docker】Docker下安装使用Oracle\n###### 下载官网镜像\n```shell\n[root@localhost mysql]# docker pull wnameless/oracle-xe-11g\n\nUsing default tag: latest\nlatest: Pulling from wnameless/oracle-xe-11g\n9fb6c798fa41: Pull complete\n3b61febd4aef: Pull complete\n9d99b9777eb0: Pull complete\nd010c8cf75d7: Pull complete\n7fac07fb303e: Pull complete\n39848af56716: Pull complete\ncdddd1b7e86a: Pull complete\nDigest: sha256:63128f31cd7f4f01ba7af28c9e40cdb877ecdcf93b19273d56928ea19c09c6f6\nStatus: Downloaded newer image for wnameless/oracle-xe-11g:latest\n\n[root@localhost mysql]# docker images\n\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\nwnameless/oracle-xe-11g   latest              f794779ccdb9        7 weeks ago         2.23GB\n```\n###### 运行镜像\n```shell\n[root@localhost mysql]# docker run -d -p 49160:22 -p 49161:1521 wnameless/oracle-xe-11g\n\n3267ef25afadf3e4ff6686a076d1caf00d0419f40509695ed1a5ca358483e65b\n\n[root@localhost mysql]# docker ps\n\nCONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                                                      NAMES\n3267ef25afad        wnameless/oracle-xe-11g   \"/bin/sh -c \'/usr/...\"   6 minutes ago       Up 6 minutes        8080/tcp, 0.0.0.0:49160->22/tcp, 0.0.0.0:49161->1521/tcp   quirky_wright\n```\n###### 相关说明\n```shell\nhostname: localhost\nport: 49161\nsid: xe\nusername: system\npassword: oracle\nSYSTEM和SYS的初始密码都为 oracle\nContainer SSH 的 root 密码为admin\n```\n\n四 测试\n![](/emd_blog/static/userImages/markdownuploadimages/20180922ORACLE.png =200x300)\n', 'md');
INSERT INTO `t_blog` VALUES ('54', '【Centos】linux上传文件 rz命令 提示command not found 解决方法', '`-bash: rz: command not found`\n\n##### 安装lrzsz：\n```shell\nyum -y install lrzsz\n```\n\n现在就可以正常使用rz、sz命令上传、下载数据了。\n\n上传文件\n```shell\n#rz filename\n```\n\n下载文件\n```shell\n', '2018-09-22 16:29:28', '1', '0', '<p><code>-bash: rz: command not found</code></p>\n<h5 id=\"h5--lrzsz-\"><a name=\"安装lrzsz：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装lrzsz：</h5><pre><code class=\"lang-shell\">yum -y install lrzsz\n</code></pre>\n<p>现在就可以正常使用rz、sz命令上传、下载数据了。</p>\n<p>上传文件</p>\n<pre><code class=\"lang-shell\">#rz filename\n</code></pre>\n<p>下载文件</p>\n<pre><code class=\"lang-shell\">sz filename\n</code></pre>\n', '16', 'linux', '`-bash: rz: command not found`\n\n##### 安装lrzsz：\n```shell\nyum -y install lrzsz\n```\n\n现在就可以正常使用rz、sz命令上传、下载数据了。\n\n上传文件\n```shell\n#rz filename\n```\n\n下载文件\n```shell\nsz filename\n```\n\n\n', 'md');

-- ----------------------------
-- Table structure for t_blogger
-- ----------------------------
DROP TABLE IF EXISTS `t_blogger`;
CREATE TABLE `t_blogger` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键编号id',
  `userName` varchar(50) DEFAULT NULL COMMENT '用户名',
  `password` varchar(100) DEFAULT NULL COMMENT '密码',
  `profile` text COMMENT '个人简介',
  `nickName` varchar(50) DEFAULT NULL COMMENT '昵称',
  `sign` varchar(100) DEFAULT NULL COMMENT '个性签名',
  `imageName` varchar(100) DEFAULT NULL COMMENT '博主头像',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_blogger
-- ----------------------------
INSERT INTO `t_blogger` VALUES ('1', 'admin', '928bfd2577490322a6e19b793691467e', '<p>Java开发者</p><p><br/></p><p><br/></p>', 'admin', '知识改变命运，技术改变世界', '20170913042714.jpg');

-- ----------------------------
-- Table structure for t_blogtype
-- ----------------------------
DROP TABLE IF EXISTS `t_blogtype`;
CREATE TABLE `t_blogtype` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id编号',
  `typeName` varchar(30) DEFAULT NULL COMMENT '文章类型名称',
  `orderNo` int(11) DEFAULT NULL COMMENT '排序，从小到大排序显示',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_blogtype
-- ----------------------------
INSERT INTO `t_blogtype` VALUES ('1', 'JavaSE', '1');
INSERT INTO `t_blogtype` VALUES ('2', 'Mysql', '2');
INSERT INTO `t_blogtype` VALUES ('3', 'Tomcat', '3');
INSERT INTO `t_blogtype` VALUES ('4', 'IT之路', '6');
INSERT INTO `t_blogtype` VALUES ('5', '随心生活', '7');
INSERT INTO `t_blogtype` VALUES ('7', 'shiro', '4');
INSERT INTO `t_blogtype` VALUES ('9', 'webservice', '5');
INSERT INTO `t_blogtype` VALUES ('10', 'jsoup', '4');
INSERT INTO `t_blogtype` VALUES ('11', 'hibernate', '5');
INSERT INTO `t_blogtype` VALUES ('12', 'maven', '5');
INSERT INTO `t_blogtype` VALUES ('15', 'Android', '8');
INSERT INTO `t_blogtype` VALUES ('16', 'Linux', '8');
INSERT INTO `t_blogtype` VALUES ('17', 'eclipse', '1');
INSERT INTO `t_blogtype` VALUES ('18', 'Redis', '11');
INSERT INTO `t_blogtype` VALUES ('19', 'Oracle', '2');
INSERT INTO `t_blogtype` VALUES ('20', 'Nginx', '33');
INSERT INTO `t_blogtype` VALUES ('21', 'Zookeeper', '22');
INSERT INTO `t_blogtype` VALUES ('22', 'Dubbo', '23');
INSERT INTO `t_blogtype` VALUES ('23', 'Jdk', '7');
INSERT INTO `t_blogtype` VALUES ('24', 'Intellij IDEA ', '30');
INSERT INTO `t_blogtype` VALUES ('25', 'Docker', '1');

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id编号',
  `userIp` varchar(50) DEFAULT NULL COMMENT '用户评论者的ip',
  `blogId` int(11) DEFAULT NULL COMMENT '被评论的文章id',
  `content` varchar(1000) DEFAULT NULL COMMENT '评论内容',
  `commentDate` datetime DEFAULT NULL COMMENT '评论日期',
  `state` int(11) DEFAULT NULL COMMENT '审核状态，0待审核。1审核通过，2审核未通过',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_comment
-- ----------------------------

-- ----------------------------
-- Table structure for t_link
-- ----------------------------
DROP TABLE IF EXISTS `t_link`;
CREATE TABLE `t_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `linkName` varchar(100) DEFAULT NULL COMMENT '链接名称',
  `linkUrl` varchar(200) DEFAULT NULL COMMENT '链接地址',
  `orderNo` int(11) DEFAULT NULL COMMENT '排序序号，从小到大排序',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_link
-- ----------------------------
INSERT INTO `t_link` VALUES ('4', 'github', 'https://github.com/qq986945193', '2');
INSERT INTO `t_link` VALUES ('5', '码云gitee', 'https://gitee.com/MCXIAOBING', '3');
INSERT INTO `t_link` VALUES ('6', '博主微博', 'http://weibo.com/mcxiaobing', '1');
